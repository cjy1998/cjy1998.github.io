<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript学习笔记2</title>
    <link href="/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><a id="more"></a><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = intAll;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intAll</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> ans = prompt(<span class="hljs-string">&quot;Enter a number&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">/*我们要关注 3 种情况：根本没有输入；用户输入了某些内容，但不是数字；输入的是数字，但它是负数（因为负数的平方根是虚数，这超出了这个示例的范围） 。如果 !ans 是 true ，就意味着用户没有输入任何内容。内置的 isNaN() 方法检查传递给它的参数是否“不是数字（Not a Number） ” 。如果isNaN() 返回 true ，就说明输入的内容是无效的。如果 ans 小于 0，它就是负数。对于以上任何情况，都希望抛出一个错误，指出“Not a valid number（不是有效的数字） ” 。当抛出错误之后，JavaScript 跳出try 块并寻找对应的 catch 语句。因此， try 块中其余的代码都被跳过。 */</span><br>        <br>        <span class="hljs-keyword">if</span> (!ans||<span class="hljs-built_in">isNaN</span>(ans)||ans&lt;<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Not a number&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果输入了有效的内容，就显示平方根</span><br>        alert(<span class="hljs-string">&quot;The square root of&quot;</span>+ans+<span class="hljs-string">&quot;is&quot;</span>+<span class="hljs-built_in">Math</span>.sqrt(ans));<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(errMsg)&#123;<br>        alert(errMsg.message);<br>    &#125;<br>    <span class="hljs-comment">/*还有一个可选部分：最后的 &#123;&#125; 块。这个部分放在 catch 后面，无论 try 块是否抛出错误，这里</span><br><span class="hljs-comment">包含的代码都应该执行。  */</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习笔记1</title>
    <link href="/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="警告框、确认用户的选择、提示用户、重新定向。"><a href="#警告框、确认用户的选择、提示用户、重新定向。" class="headerlink" title="警告框、确认用户的选择、提示用户、重新定向。"></a>警告框、确认用户的选择、提示用户、重新定向。</h1><a id="more"></a><h2 id="html文档"><a href="#html文档" class="headerlink" title="html文档"></a>html文档</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myMessage&quot;</span>).innerHTML = <span class="hljs-string">&quot;Hello,nihao&quot;</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;Day1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myMessage&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Js文件"><a href="#Js文件" class="headerlink" title="Js文件"></a>Js文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//警告框</span><br><span class="hljs-comment">//confirm() 方法有一个参数 （向用户询问的问题） ， 并根据用户的响应返回 true 或 false 。</span><br><br><span class="hljs-keyword">if</span>(confirm(<span class="hljs-string">&quot;Are you sure you want to do that?&quot;</span>))&#123;<br>alert(<span class="hljs-string">&quot;you said yes&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>alert(<span class="hljs-string">&quot;you said no &quot;</span>)<br>&#125;<br><br><span class="hljs-comment">/*传递给 prompt() 方法的是由逗号分隔的两段信息（正式的术语是参数） ：向用户询问的问题和默</span><br><span class="hljs-comment">认回答。这个方法返回用户的响应或 null。*/</span><br><br><span class="hljs-comment">/*如果变量是在一个函数中创建的，那么它是这</span><br><span class="hljs-comment">个函数的局部（local）变量，其他函数不能访问它。如果它是在任何函数之外创建的，</span><br><span class="hljs-comment">它就是全局的（global） ，脚本中的所有代码都可以访问它。在这个脚本中，我们创建</span><br><span class="hljs-comment">了ans全局变量。 */</span><br><br><br><span class="hljs-comment">//提示用户</span><br><span class="hljs-keyword">var</span> ans = prompt(<span class="hljs-string">&quot;Are you sure want to do that?&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">if</span>(ans)&#123;<br> alert(<span class="hljs-string">&quot;you said&quot;</span>+ans)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> alert(<span class="hljs-string">&quot;you refused to answer&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">用链接对用户进行重定向 </span><br><span class="hljs-comment">当完成页面加载时，它会触发 initAll() 函数。</span><br><span class="hljs-comment">这个函数告诉 id 为 change 的元素 （也就是步骤 1 中的链接） ， 在它被单击时应该调用</span><br><span class="hljs-comment">Second函数。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">window</span>.onload = intAll;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intAll</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;change&quot;</span>).onclick = Second;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如果调用这个函数， 它就将 window.location （即浏览器中显示的页面） 设置为一个新页面。 return </span><br><span class="hljs-comment">false 表示停止对用户单击的处理，这样就不会加载 href 指向的页面。 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Second</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">window</span>.location=<span class="hljs-string">&quot;index.html&quot;</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this的用法"><a href="#this的用法" class="headerlink" title="this的用法"></a>this的用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = initAll; <br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initAll</span>(<span class="hljs-params"></span>) </span>&#123;  <br>     <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;redirect&quot;</span>).onclick = initRedirect; <br>&#125; <br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> JavaScript 关键字 this 使脚本能够根据使用这个关键字的上下文将值传递给函数。在这个示例</span><br><span class="hljs-comment">中， this 是在一个由标签的事件触发的函数中使用的，所以 this 是一个链接对象。只需将 this 看</span><br><span class="hljs-comment">做一个容器.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initRedirect</span>(<span class="hljs-params"></span>) </span>&#123; <br>   alert(<span class="hljs-string">&quot;We are not responsible for the content of pages outside our site&quot;</span>); <br>     <span class="hljs-built_in">window</span>.location = <span class="hljs-built_in">this</span>; <br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>     &#125;<br></code></pre></td></tr></table></figure><h2 id="多级条件switch-case语句"><a href="#多级条件switch-case语句" class="headerlink" title="多级条件switch /case语句"></a>多级条件switch /case语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = intAll;<br><span class="hljs-comment">//当加载页面时，调用 initAll() 函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intAll</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;frist&quot;</span>).onclick=Second;<br> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;second&quot;</span>).onclick=Second;<br> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;third&quot;</span>).onclick=Second;<br>    <br><span class="hljs-comment">/*在这个函数中，我们为页面上的每个按钮设置了 onclick 处理程序。因为在 HTML 中设置了 id</span><br><span class="hljs-comment">属性和 value 属性，所以可以使用 getElementById() 设置事件处理程序。如果有 value 属性，就可以使用 getElementByValue() 调用，那么就不必设置 id 属性。 */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Second</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//this 对象的 id 用作 switch() 的参数。这个值将决定执行以下 case 语句中的哪一个</span><br>    <span class="hljs-keyword">switch</span>(<span class="hljs-built_in">this</span>.id)&#123;<br>        <span class="hljs-keyword">case</span><span class="hljs-string">&quot;frist&quot;</span>:<br>        alert(<span class="hljs-string">&quot;you clicked frist&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span><span class="hljs-string">&quot;second&quot;</span>:<br>        alert(<span class="hljs-string">&quot;you clicked second&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span><span class="hljs-string">&quot;third&quot;</span>:<br>        alert(<span class="hljs-string">&quot;you clicked third&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java总结1</title>
    <link href="/2021/01/28/Java%E6%80%BB%E7%BB%931/"/>
    <url>/2021/01/28/Java%E6%80%BB%E7%BB%931/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是多态性？什么是虚拟方法的调用？"><a href="#1、什么是多态性？什么是虚拟方法的调用？" class="headerlink" title="1、什么是多态性？什么是虚拟方法的调用？"></a>1、什么是多态性？什么是虚拟方法的调用？</h2><p>对象的多态性，父类的引用指向子类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p = <span class="hljs-keyword">new</span> Man();<br>p.eat();<br></code></pre></td></tr></table></figure><p>调用方法时，编译时看左边，运行时看右边。</p><h2 id="2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。"><a href="#2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。" class="headerlink" title="2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。"></a>2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。</h2><h2 id="3、方法的重写（override-overwrite）的具体规则有哪些？"><a href="#3、方法的重写（override-overwrite）的具体规则有哪些？" class="headerlink" title="3、方法的重写（override/overwrite）的具体规则有哪些？"></a>3、方法的重写（override/overwrite）的具体规则有哪些？</h2><p>Overload是重载的意思，表示在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参bai数类型不同即可。Override是覆盖的意思，也就是重写，它与返回值类型无关，只看参数列表。</p><p>两者不同主要体现在:</p><p>1，目的</p><p>overload用于增加程序的可读性(做法不同,但是做的同一事情)。  override用于提供其超级类已经提供的方法的特定实现。  </p><p>2，范围</p><p>overload 在相同的类范围内内执行。  override发生在两类具有继承（继承）的关系。</p><p>3， 参数 </p><p>overload参数必须不同。  override参数必须相同。 </p><p>4，多态性</p><p>overload 静态多态,调用的函数在编译时被选中。  override 是运行时多态性的。 </p><p>5，返回类型</p><p>overload中可以相同或不同。但你必须改变参数。  override必须是相同的或协变的。</p><h3 id="具体规则"><a href="#具体规则" class="headerlink" title="具体规则"></a>具体规则</h3><p>override（重写，覆盖） （1）方法名、参数、<a href="https://www.baidu.com/s?wd=%E8%BF%94%E5%9B%9E%E5%80%BC&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">返回值</a>相同。 （2）子类方法不能缩小父类方法的访问权限。 （3）子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。 （4）存在于父类和子类之间。 （5）方法被定义为final不能被重写。 （6）被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</p><p>overload（重载，过载） （1）参数类型、个数、顺序至少有一个不相同。 （2）不能重载只有<a href="https://www.baidu.com/s?wd=%E8%BF%94%E5%9B%9E%E5%80%BC&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">返回值</a>不同的方法名。 （3）针对于一个类而言。 （4）不能通过访问权限、返回类型、抛出的异常进行重载； （5）方法的异常类型和数目不会对重载造成影响；</p><p>override应用中，最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法进行了声明，而我们在实现时，就需要实现接口声明的所有方法。 除了这个典型的用法以外，我们在继承中也可能会在子类覆盖父类中的方法。</p><h3 id="4、super调用构造器，有哪些具体的注意点？"><a href="#4、super调用构造器，有哪些具体的注意点？" class="headerlink" title="4、super调用构造器，有哪些具体的注意点？"></a>4、super调用构造器，有哪些具体的注意点？</h3><p>this(形参列表)：本类重载的其他构造器；</p><p>super(形参列表)：调用父类中指定的构造器；</p><p>俩个都必须放在第一行，只能选择一个。如果不写，默认Super空参。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言day2</title>
    <link href="/2021/01/13/c%E8%AF%AD%E8%A8%80day2/"/>
    <url>/2021/01/13/c%E8%AF%AD%E8%A8%80day2/</url>
    
    <content type="html"><![CDATA[<h1 id="printf-scanf-if-else-for-。"><a href="#printf-scanf-if-else-for-。" class="headerlink" title="printf(),scanf(),if else,for()。"></a><code>printf()</code>,<code>scanf</code>(),<code>if else</code>,<code>for()</code>。</h1><a id="more"></a><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><p>函数<code>printf()</code>的一般调用格式为：</p><h5 id="printf-格式控制字符串，输出参数1，输出参数2…"><a href="#printf-格式控制字符串，输出参数1，输出参数2…" class="headerlink" title="printf(格式控制字符串，输出参数1，输出参数2…);"></a>printf(格式控制字符串，输出参数1，输出参数2…);</h5><p>格式控制字符串需要用双引号括起来，表示输出的格式；而输出参数则是一些要输出的数据，这些数据可以是<code>变量</code>、<code>常量</code>、<code>表达式</code>。</p><h4 id="格式控制字符串"><a href="#格式控制字符串" class="headerlink" title="格式控制字符串"></a>格式控制字符串</h4><p>格式控制字符串包含两种信息：格式控制说明和普通字符。例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;整数=%d,浮点数=%f\n&quot;</span>,x,y);<br></code></pre></td></tr></table></figure><p>输出时普通字符会原样输出，%d和%f会分别输出x和y的值。格式化控制说明其类型、个数和位置是一一对应的关系。</p><p>在输出格式控制说明中，可以加宽度限定词，指定数据的输出宽度。例如，整型数据的格式控制说明%md，指定了数据的输出宽度为m(包括符号位)。实型数据的输出格式控制说明%m.nf，指定输出浮点型数据时保留n位小数，且输出宽度是m。</p><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><p>函数<code>scanf()</code>的一般调用格式为：</p><h5 id="scanf-格式控制字符串，输出参数1，输出参数2…"><a href="#scanf-格式控制字符串，输出参数1，输出参数2…" class="headerlink" title="scanf(格式控制字符串，输出参数1，输出参数2…);"></a>scanf(格式控制字符串，输出参数1，输出参数2…);</h5><p>格式控制字符串表示输入的格式，输入参数是变量地址（变量名前加&amp;）。例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">double</span> y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%lf&quot;</span>,x,y);<br></code></pre></td></tr></table></figure><p>与<code>prinft()</code>不同的格式控制字符，在<code>scanf()</code>函数中float型数据用%f,double类型用%lf。而在<code>printf()</code>中浮点数类型都用%f。两者的共同之处是int型数据都用%d。</p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if  else"></a>if  else</h2><p><code>if-else</code>的一般形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(表达式)<br>语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>语句<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pythonday2</title>
    <link href="/2021/01/06/pythonday2/"/>
    <url>/2021/01/06/pythonday2/</url>
    
    <content type="html"><![CDATA[<h1 id="两种有序的列表list和tuple"><a href="#两种有序的列表list和tuple" class="headerlink" title="两种有序的列表list和tuple"></a>两种有序的列表list和tuple</h1><p>list是一种有序的集合，可以随时添加和删除其中的元素。</p><p>tuple称为元组，一旦初始化就不能更改。</p><a id="more"></a><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>表示方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t=[<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>变量<code>t</code>就是一个<code>list</code>,用<code>len()</code>函数可以获取list元素的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(t)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可以用索引来访问每一个位置的元素，最后一个元素的索引是<code>len(t)-1</code>，还可以用<code>-1</code>做索引直接访问最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">2</span>]<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t[-<span class="hljs-number">1</span>]<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>可以用<code>append()</code>方法添加元素到末尾位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.append(<span class="hljs-string">&#x27;9&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;9&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>list</code>里边的数据类型可以是多种的，当然也可以是<code>list</code>。</p><p>要删除<code>lis</code>末尾的元素可以用pop()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.pop()<br><span class="hljs-string">&#x27;9&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>把元素插入到指定的位置，可以用<code>insert()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.insert(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>删除指定位置的元素，可以用<code>pop(i)</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.pop(<span class="hljs-number">0</span>)<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>把某个元素替换成别的元素，可以直接赋值给对应的索引位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">0</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>当<code>list</code>中包含<code>list</code>时，用索引来访问时可以看作一个二维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>print(t[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>tuple与list非常相似，但是一旦初始化就无法改变，获取元素的方法与list一样，用索引方法进行查询。相比较tuple比较安全，所以能用tuple就用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>p=(<span class="hljs-number">7</span>,[<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><span class="hljs-comment">#可以看出当想改变`0`处的元素时，会报错误信息。</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br><span class="hljs-comment">#当改变tuple中的list时则能改变成功，这是因为改变其实时list里边的元素而tuple一开始指向的就是list,其指向并没有改变。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p<br>(<span class="hljs-number">7</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h5 id="当tuple中只有一个元素的时候，必须用-消除歧义，避免计算机识别成数字1。"><a href="#当tuple中只有一个元素的时候，必须用-消除歧义，避免计算机识别成数字1。" class="headerlink" title="当tuple中只有一个元素的时候，必须用,消除歧义，避免计算机识别成数字1。"></a>当tuple中只有一个元素的时候，必须用<code>,</code>消除歧义，避免计算机识别成数字1。</h5><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>list</code>可以完成“增”<code>append()</code>“删”<code>pop()</code>“改”<code>t[0]=1赋值操作</code>“查”<code>索引</code>“插”<code>insert(位置，值)</code>操作。</p><p><code>tuple</code>相对list比较安全，其内部指向元素不能改变。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pythonday1</title>
    <link href="/2021/01/05/pythonday1/"/>
    <url>/2021/01/05/pythonday1/</url>
    
    <content type="html"><![CDATA[<h1 id="每日学Python-day1"><a href="#每日学Python-day1" class="headerlink" title="每日学Python day1"></a>每日学Python day1</h1><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>括号内英语单引号和双引号都可以，如果想输出多个字符，可以用逗号“,”隔开。在打印的时候遇到一个逗号，就会输出一个空格。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><p>可以直接输入并且存放在变量里，括号里也可以存放信息。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的名字&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h3><p>python语法比较简单，采用缩进方式。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#注释</span><br>a=<span class="hljs-number">100</span><br><span class="hljs-keyword">if</span> a &gt;= <span class="hljs-number">0</span>:<br>    print(a)<br><span class="hljs-keyword">else</span>:<br>    print(-a)<br></code></pre></td></tr></table></figure><p>以<code>#</code>开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。</p><p>其他每一行都是一个语句，当语句以冒号<code>:</code>结尾时，缩进的语句视为代码块。</p><p>缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的惯例，应该始终坚持使用<em>4个空格</em>的缩进。</p><p>在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整数、浮点数、字符串、布尔值（True和Flase）。</p><h5 id="转义字符-，例："><a href="#转义字符-，例：" class="headerlink" title="转义字符\，例："></a>转义字符\，例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;i\&#x27;m\&quot;ok\&quot;!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出的结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">i<span class="hljs-string">&#x27;m&quot;ok&quot;!</span><br></code></pre></td></tr></table></figure><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p><p><code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义。</p><p>python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容。</p><h5 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h5><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p><p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>。</p><p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>。</p><p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>。</p><p>布尔值经常用在条件判断中。</p><h5 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h5><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>变量<code>a</code>是一个整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">t_007 = <span class="hljs-string">&#x27;T007&#x27;</span><br></code></pre></td></tr></table></figure><p>变量<code>t_007</code>是一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Answer = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>变量<code>Answer</code>是一个布尔值<code>True</code>。</p><p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">123</span> <span class="hljs-comment"># a是整数</span><br>print(a)<br>a = <span class="hljs-string">&#x27;ABC&#x27;</span> <span class="hljs-comment"># a变为字符串</span><br>print(a)<br>输出：<br><span class="hljs-number">123</span><br>ABC<br></code></pre></td></tr></table></figure><p>这种变量本身类型不固定的语言称之为<em>动态语言</em>，与之对应的是<em>静态语言</em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>所谓常量就是不能变的变量，在Python中通常用全部大写的变量名表示常量：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PI</span> = <span class="hljs-number">3</span>.<span class="hljs-number">14159265359</span><br></code></pre></td></tr></table></figure><p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量<code>PI</code>的值，也没人能拦住你。</p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>python中有两种除法：</p><ol><li>/，计算结果为浮点数，即便两个数能够整除，其结果也是浮点数。</li><li>//，被称为地板除，结果永远是整数。</li><li>%，余数运算。</li></ol><p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言day1</title>
    <link href="/2021/01/05/c%E8%AF%AD%E8%A8%80day1/"/>
    <url>/2021/01/05/c%E8%AF%AD%E8%A8%80day1/</url>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="编译预处理命令"><a href="#编译预处理命令" class="headerlink" title="编译预处理命令"></a>编译预处理命令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>末尾不加分号</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(main)</span></span>&#123;<br>    (函数体);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个名为main的函数，该函数的返回值时整数型（int），参数在函数的后面的一对括号中定义，这里的关键字void表示main()函数不需要参数。任何一个程序都必须有而且只能由一个main（）函数，当程序运行时，首先从main（）函数执行。</p><h2 id="常量、变量和数据类型"><a href="#常量、变量和数据类型" class="headerlink" title="常量、变量和数据类型"></a>常量、变量和数据类型</h2><p>在程序运行过程中，其值不能被改变的量成为常量，其值可以改变的量称为变量。</p><h5 id="常量的类型通常由书写格式决定。"><a href="#常量的类型通常由书写格式决定。" class="headerlink" title="常量的类型通常由书写格式决定。"></a>常量的类型通常由书写格式决定。</h5><p>整型常量（100）、实型常量（199.21），文字常量、符号常量。</p><h5 id="变量的类型是在定义时指定。"><a href="#变量的类型是在定义时指定。" class="headerlink" title="变量的类型是在定义时指定。"></a>变量的类型是在定义时指定。</h5><p>变量的定义格式一般为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">类型名 变量名；<br><span class="hljs-built_in">int</span> a,b; <span class="hljs-comment">/*定义两个整型变量a和b，用于存放整数。</span><br></code></pre></td></tr></table></figure><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p>int(整型)、char(字符型)、float(单精度浮点数)、double(双精度浮点数)。</p><h5 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h5><p>数组，以[]为标志</p><p>枚举(enum)，联合(union)</p><p>指针类型，以*为标志</p><h5 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h5><p><img src="https://raw.githubusercontent.com/cjy1998/imagesbed/main/img/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><p>return 0;它结束main()函数的运行，并向系统返回一个整数0，作为程序的结束状态。由于main（）函数的返回值是整型数，因此，任何整数都可以作为返回值。按照惯例，如果main()函数返回0，说明程序运行正常，返回其他数字则表示各种不同的错误情况。系统可以通过检查返回值来判断程序是否运行成功。</p></li><li><p>c语言中的所有语句都必须以分号结束。</p></li><li><p>\n换行符。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/01/04/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/01/04/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>标题就是在内容前加# 来实现，注意#与内容间应有空格。</p><a id="more"></a><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-emphasis">*这是倾斜的文字*</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">~~这是加删除线的文字~~</span></span></span></span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><hr><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>----<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">****</span>*</span></span><br></code></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片titl<span class="hljs-string">e&#x27;&#x27;</span>)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><p><img src="https://raw.githubusercontent.com/cjy1998/imagesbed/main/img/img3.jpg" alt="github图床图片"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">！[<span class="hljs-string">效果图</span>](<span class="hljs-link">/images/img1.jpg&quot;效果图&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img1.jpg" alt="效果图"></p><p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p><h5 id="使用插件标签引用图片"><a href="#使用插件标签引用图片" class="headerlink" title="使用插件标签引用图片"></a>使用插件标签引用图片</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#123;<span class="hljs-symbol">%</span> asset_img <span class="hljs-built_in">example</span>.jpg This <span class="hljs-built_in">is</span> an <span class="hljs-built_in">example</span> <span class="hljs-built_in">image</span> <span class="hljs-symbol">%</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><p>语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">超链接名</span>](<span class="hljs-link">超链接地址 &quot;超链接title&quot;</span>)<br>title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">百度</span>](<span class="hljs-link">http://baidu.com</span>)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://baidu.com/">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;超链接地址&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>超链接名<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>示例<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>简书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法：</p><p>无序列表用-+*任何一种都可以</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br><br>注意：- + <span class="hljs-emphasis">* 跟内容之间都要有一个空格</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基本操作</title>
    <link href="/2021/01/04/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/01/04/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="常见的hexo命令"><a href="#常见的hexo命令" class="headerlink" title="常见的hexo命令"></a>常见的hexo命令</h1><a id="more"></a><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><p>生成静态文件。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><p>部署网站，部署之前预先生成静态文件。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2013/7/13 20:46:25<br>---<br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>[<code>config.default_layout</code>]</td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立时间</td><td>文章建立时间</td></tr><tr><td>updated</td><td>更新时间</td><td>文件更新时间</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>分类具有顺序性和层次性，而标签没有顺序和层次。</p><h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><p>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">  -</span> Diary<br><span class="hljs-bullet">  -</span> Life<br></code></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">-</span> [Diary, PlayStation]<br><span class="hljs-bullet">-</span> [Diary, Games]<br><span class="hljs-bullet">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
