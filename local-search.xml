<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vuecli基础</title>
    <link href="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>​    CLI是Command-Line Interface, 翻译为命令行界面, 但是俗称脚手架。Vue CLI是一个官方发布 vue.js 项目脚手架使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置。</p><a id="more"></a><h2 id="Vue-CLI使用前提-–Node"><a href="#Vue-CLI使用前提-–Node" class="headerlink" title="Vue CLI使用前提 –Node"></a>Vue CLI使用前提 –Node</h2><h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>可以直接在官方网站中下载安装.</p><p>网址: <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><h3 id="检测安装的版本"><a href="#检测安装的版本" class="headerlink" title="检测安装的版本"></a>检测安装的版本</h3><p>默认情况下自动安装Node和NPM</p><p>Node环境要求8.9以上或者更高版本</p><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/node-v.png"></p><h3 id="什么是NPM呢"><a href="#什么是NPM呢" class="headerlink" title="什么是NPM呢?"></a>什么是NPM呢?</h3><ul><li>NPM的全称是Node Package Manager</li><li>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</li><li>我们会经常使用NPM来安装一些开发过程中依赖包.</li></ul><h3 id="cnpm的安装"><a href="#cnpm的安装" class="headerlink" title="cnpm的安装"></a>cnpm的安装</h3><p>由于国内直接使用 npm 的官方镜像是非常慢的，推荐使用淘宝 NPM 镜像。可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>这样就可以使用 cnpm 命令来安装模块了：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cnpm</span> install<span class="hljs-meta"> [name]</span><br></code></pre></td></tr></table></figure><h3 id="Vue-CLI使用前提-Webpack"><a href="#Vue-CLI使用前提-Webpack" class="headerlink" title="Vue CLI使用前提 - -Webpack"></a>Vue CLI使用前提 - -Webpack</h3><ul><li>Vue.js官方脚手架工具就使用了webpack模板</li><li>对所有的资源会压缩等优化操作</li><li>它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效。</li></ul><p><strong>Webpack的全局安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> webpack -g<br></code></pre></td></tr></table></figure><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/webpack.png"></p><h3 id="VueCLI的使用"><a href="#VueCLI的使用" class="headerlink" title="VueCLI的使用"></a>VueCLI的使用</h3><h4 id="安装Vue脚手架"><a href="#安装Vue脚手架" class="headerlink" title="安装Vue脚手架"></a>安装Vue脚手架</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/vuecli.png"></p><h4 id="Vue-CLI2初始化项目"><a href="#Vue-CLI2初始化项目" class="headerlink" title="Vue CLI2初始化项目"></a>Vue CLI2初始化项目</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">vue<br><span class="hljs-keyword">init</span> webpack projectname<br></code></pre></td></tr></table></figure><h4 id="Vue-CLI3初始化项目"><a href="#Vue-CLI3初始化项目" class="headerlink" title="Vue CLI3初始化项目"></a>Vue CLI3初始化项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue create projectname</span><br></code></pre></td></tr></table></figure><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/vue-create.png"></p><h4 id="目录结构详解"><a href="#目录结构详解" class="headerlink" title="目录结构详解"></a>目录结构详解</h4><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3.png"></p><h4 id="Runtime-Compiler和Runtime-only的区别"><a href="#Runtime-Compiler和Runtime-only的区别" class="headerlink" title="Runtime-Compiler和Runtime-only的区别"></a>Runtime-Compiler和Runtime-only的区别</h4><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/1.png"></p><ul><li>如果在之后的开发中，你依然使用template，就需要选择Runtime-Compiler</li><li>如果你之后的开发中，使用的是.vue文件开发，那么可以选择Runtime-only</li></ul><h3 id="render和template"><a href="#render和template" class="headerlink" title="render和template"></a>render和template</h3><p>Runtime-Compiler 版本的main.js界面</p><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/runtime-compiler.png"></p><p>Runtime-only版本的main.js界面</p><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/Runtime-only.png"></p><h4 id="vue程序的运行过程"><a href="#vue程序的运行过程" class="headerlink" title="vue程序的运行过程"></a>vue程序的运行过程</h4><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/vue%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png"></p><h4 id="render函数的使用"><a href="#render函数的使用" class="headerlink" title="render函数的使用"></a>render函数的使用</h4><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/render1.png"></p><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/render2.png"></p><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/render3.png"></p><h3 id="npm-run-build的运行过程"><a href="#npm-run-build的运行过程" class="headerlink" title="npm run build的运行过程"></a>npm run build的运行过程</h3><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/npm-run-build.png"></p><blockquote><p>转载于codewhy课件</p></blockquote><h3 id="npm-run-dev的运行过程"><a href="#npm-run-dev的运行过程" class="headerlink" title="npm run dev的运行过程"></a>npm run dev的运行过程</h3><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/npm-run-dev.png"></p><blockquote><p>转载于codewhy课件</p></blockquote><h3 id="修改配置：webpack-base-conf-js起别名"><a href="#修改配置：webpack-base-conf-js起别名" class="headerlink" title="修改配置：webpack.base.conf.js起别名"></a>修改配置：webpack.base.conf.js起别名</h3><p><img src="/2022/02/08/Vuecli%E5%9F%BA%E7%A1%80/3.png"></p><h3 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a>Vue CLI3</h3><ul><li>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3</li><li>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</li><li>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础知识</title>
    <link href="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>1.初始化一个Git仓库，使用<code>git init</code>命令。</p><p>2.添加文件到Git仓库，分两步：</p><ul><li>​    使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>​    使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ul><p>3.使用<code>git status</code>命令，查看工作区状态。<code>git status</code>只显示有文件被修改过，用<code>git diff</code>可以查看修改内容。</p><p>![](./Git基础知识/git status和git diff.png)</p><p>4.<strong><code>git log</code>命令显示从最近到最远的提交日志</strong>,可以加上**<code>--pretty=oneline</code>**参数优化显示效果。</p><p><img src="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/git-log.png"></p><p>5.在Git中，用**<code>HEAD</code><strong>表示当前版本，上一个版本就是</strong><code>HEAD^</code>**，上上一个版本就是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p><p><strong>使用<code>git reset</code>命令回退版本</strong>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>回退到上一个版本<br>git reset --hard HEAD^<br><span class="hljs-regexp">//</span>查看当前文件内容<br> cat &lt;filename&gt;<br> <span class="hljs-regexp">//</span>回退到指定版本<br> git reset --hard &lt;commit-id&gt;<br></code></pre></td></tr></table></figure><p>6.<strong>git reflog用来记录每一次命令。</strong></p><p><img src="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/git-reflag.png"></p><p><strong>7.撤销修改</strong></p><p><strong>git checkout – <filename></filename></strong></p><p>​    命令`git checkout – <filename>意思就是，把文件在工作区的修改全部撤销，这里有两种情况：</filename></p><p>​    一种是<filename>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</filename></p><p>​    一种是<filename>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</filename></p><p>​    总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>​    如果文件已经通过git add添加到了暂存区但并没有提交。可以通过命令**<code>git reset HEAD &lt;file&gt;</code><strong>把暂存区的修改撤销掉（unstage），重新放回工作区。然后通过</strong>git checkout – <filename>**，把文件在工作区的修改全部撤销。</filename></p><p>​    如果文件已经通过git commit提交到了版本库，在没有提交到远程库的前提下，只能进行版本回退。</p><p><strong>8.添加远程库</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//把上面的michaelliao替换成你自己的GitHub账户名</span><br>$ git remote add origin <span class="hljs-symbol">git@</span>github.com:michaelliao/learngit.git<br></code></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>只要本地作了提交，就可以通过命令：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p>把本地<code>master</code>分支的最新修改推送至GitHub。</p><p><strong>9.删除远程库</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除<br>git remote rm &lt;name&gt;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>查看远程库信息<br>git remote -v<br></code></pre></td></tr></table></figure><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><p><strong>10.从远程库克隆</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:michaelliao/gitskills.git<br></code></pre></td></tr></table></figure><p><img src="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/git-clone.png"></p><p><strong>11.分支管理</strong></p><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ul><p><img src="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/git-branch.png"></p><p><strong>12.解决冲突</strong></p><p>产生冲突的原因是，两个分支同时更改了同样的位置。当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p><img src="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/dev.png"></p><p><img src="/2022/02/08/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/dev-master.png"></p><p>用<code>git log --graph</code>命令可以看到分支合并图</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack详解</title>
    <link href="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是Webpack？"><a href="#什么是Webpack？" class="headerlink" title="什么是Webpack？"></a><strong>什么是Webpack？</strong></h3><p>  官方解释：At its core, webpack is a <em>static module bundler</em> for modern JavaScript applications. （从本质上来讲，webpack是一个现代的JavaScript应用的静态<strong>模块打包</strong>工具。）核心就是：<strong>模块和打包</strong>。</p><a id="more"></a><h3 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h3><p>  <strong>webpack其中一个核心就是让我们可能进行模块化开发，并且会帮助我们处理模块间的依赖关系。而且不仅仅是JavaScript文件，CSS、图片、json文件等等在webpack中都可以被当做模块来使用。这就是webpack中模块化的概念。</strong></p><p>  <strong>打包就是将webpack中的各种资源模块进行打包合并成一个或多个包(Bundle)。并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。</strong></p><h3 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h3><p><strong>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">//查看<span class="hljs-keyword">node</span><span class="hljs-title">版本</span><br><span class="hljs-title">node</span> -v<br></code></pre></td></tr></table></figure><p><strong>全局安装webpack</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install webpack@<span class="hljs-number">3.6</span><span class="hljs-number">.0</span> --save-dev<br></code></pre></td></tr></table></figure><p>–save-dev是指开发时依赖，项目打包后不需要继续使用。</p><p> –save是指项目运行必须的依赖。</p><p><strong>局部安装webpack</strong></p><p>一个项目往往依赖特定的webpack版本，全局的版本可能很这个项目的webpack版本不一致，导出打包出现问题。所以通常一个项目，都有自己局部的webpack。</p><ol><li><p>项目中需要安装自己局部的webpack</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install webpack@<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span> --save-dev<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>通过进入node_modules/.bin/webpack启动webpack打包</p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack04.png"></p></li></ol><p><strong>在终端直接执行webpack命令，使用的全局安装的webpack</strong></p><p><strong>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</strong></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>创建如下文件夹和文件</p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack.png"></p><p>使用webpack的指令进行打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">webpack src/main.js dist/bundle.js<br></code></pre></td></tr></table></figure><p>打包后会在dist文件下，生成一个bundle.js文件</p><p>bundle.js文件，是webpack处理了项目直接文件依赖后生成的一个js文件，我们只需要将这个js文件在index.html中引入即可。</p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack02.png"></p><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><h4 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h4><p>  如果每次使用webpack的命令都需要写上入口和出口作为参数，就非常麻烦，创建一个<strong>webpack.config.js文件</strong>可以将这两个参数写到配置中，在运行时，直接读取。</p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack03.png"></p><h4 id="package-json中定义启动"><a href="#package-json中定义启动" class="headerlink" title="package.json中定义启动"></a><strong>package.json中定义启动</strong></h4><p>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</p><p><strong>首先，会寻找本地的node_modules/.bin路径中对应的命令。</strong></p><p><strong>如果没有找到，会去全局的环境变量中寻找。</strong></p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack05.png"></p><p>执行build 指令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">npm <span class="hljs-keyword">run</span><span class="bash"> build</span><br></code></pre></td></tr></table></figure><h4 id="loader的使用过程"><a href="#loader的使用过程" class="headerlink" title="loader的使用过程"></a>loader的使用过程</h4><p><strong>步骤一：通过npm安装需要使用的loader</strong></p><p><strong>步骤二：在webpack.config.js中的modules关键字下进行配置</strong></p><p>大部分loader都可以在webpack的官网中找到</p><p>[<a href="https://www.webpackjs.com]">https://www.webpackjs.com]</a>: </p><h4 id="css文件处理"><a href="#css文件处理" class="headerlink" title="css文件处理"></a>css文件处理</h4><p>1.在src目录中，创建一个css文件，其中创建一个normal.css文件</p><p>2.在入口文件中引用：<strong>import  css from  “./css/normal.css”;</strong></p><p>3.根据webpack官方文档进行安装和配置css-laoder</p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack06.png"></p><p><strong>css-loader只负责加载css文件，但是并不负责将css具体样式嵌入到文档中。还需要一个style-loader帮助我们处理。</strong></p><p><em>各种loader和webpack的对应版本在github中查看</em></p><h4 id="less文件处理"><a href="#less文件处理" class="headerlink" title="less文件处理"></a><strong>less文件处理</strong></h4><p>1.安装相应的less-loader和less</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> --save-dev <span class="hljs-keyword">less</span>-loader <span class="hljs-keyword">less</span><br></code></pre></td></tr></table></figure><p>2.添加一个rules选项，用于处理.less文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rules: [&#123;<br>           test: <span class="hljs-regexp">/\.less$/</span>,<br>           use: [&#123;<br>               loader: <span class="hljs-string">&quot;style-loader&quot;</span> <span class="hljs-comment">// creates style nodes from JS strings</span><br>           &#125;, &#123;<br>               loader: <span class="hljs-string">&quot;css-loader&quot;</span> <span class="hljs-comment">// translates CSS into CommonJS</span><br>           &#125;, &#123;<br>               loader: <span class="hljs-string">&quot;less-loader&quot;</span> <span class="hljs-comment">// compiles Less to CSS</span><br>           &#125;]<br>       &#125;]<br></code></pre></td></tr></table></figure><h4 id="图片文件处理"><a href="#图片文件处理" class="headerlink" title="图片文件处理"></a>图片文件处理</h4><p>1.安装相应的url-loader</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> url-loader <br></code></pre></td></tr></table></figure><p>2.添加一个rules选项，用于处理图片文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,<br>        use: [<br>          &#123;<br>            loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>            options: &#123;<br>            <span class="hljs-comment">//limit属性的作用，当图片小于8kb时，对图片进行base64编码</span><br>              limit: <span class="hljs-number">8192</span><br>            &#125;<br>          &#125;<br>        ]<br>      &#125;<br>    ]<br></code></pre></td></tr></table></figure><p>3.大于8kb的图片，会通过file-loader进行处理,安装file-loader </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> --save-dev <span class="hljs-keyword">file</span>-loader <br></code></pre></td></tr></table></figure><p>4.再次打包，就会发现dist文件夹下多了一个图片文件</p><p>webpack自动帮助我们生成一个非常长的名字，是一个32位hash值，目的是防止名字重复。</p><p><strong>改变图片名称，我们可以在options中添加上如下选项：</strong></p><ul><li>img：文件要打包到的文件夹</li><li>name：获取图片原来的名字，放在该位置</li><li>hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</li><li>ext：使用图片原来的扩展名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">options: &#123;<br>            <span class="hljs-comment">//limit属性的作用，当图片小于8kb时，对图片进行base64编码</span><br>              limit: <span class="hljs-number">8192</span><br>    name: <span class="hljs-string">&#x27;img/[name].[hash:8].[ext]&#x27;</span><br>            &#125;<br></code></pre></td></tr></table></figure><p><strong>另外还需要改变图片路径</strong></p><p><strong>默认情况下，webpack会将生成的路径直接返回给使用者</strong></p><p><strong>但是，我们整个程序是打包在dist文件夹下的，所以这里我们需要在路径下再添加一个dist/</strong></p><p><img src="/2022/02/05/webpack%E8%AF%A6%E8%A7%A3/webpack08.png"></p><h4 id="ES6语法处理"><a href="#ES6语法处理" class="headerlink" title="ES6语法处理"></a><strong>ES6语法处理</strong></h4><p>直接使用babel对应的loader就可以将ES6语法转换为ES5语法。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>--save-dev <span class="hljs-keyword">babel-loader@7 </span><span class="hljs-keyword">babel-core </span><span class="hljs-keyword">babel-preset-es2015</span><br></code></pre></td></tr></table></figure><p>配置webpack.config.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rules: [<br>   &#123;<br>     test: <span class="hljs-regexp">/\.m?js$/</span>,<br>     exclude: <span class="hljs-regexp">/(node_modules|bower_components)/</span>,<br>     use: &#123;<br>       loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>       options: &#123;<br>         presets: [<span class="hljs-string">&#x27;es2015&#x27;</span>]<br>       &#125;<br>     &#125;<br>   &#125;<br> ]<br></code></pre></td></tr></table></figure><h3 id="webpack配置Vue"><a href="#webpack配置Vue" class="headerlink" title="webpack配置Vue"></a>webpack配置Vue</h3><h4 id="一、引入Vuejs"><a href="#一、引入Vuejs" class="headerlink" title="一、引入Vuejs"></a>一、引入Vuejs</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install vue <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>修改webpack的配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">resolve</span>: &#123;<br>    <span class="hljs-comment">//alias:别名</span><br>    <span class="hljs-attribute">alias</span>: &#123;<br>        <span class="hljs-string">&#x27;vue$&#x27;</span>: <span class="hljs-string">&#x27;vue/dist/vue.esm.js&#x27;</span><br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="二、安装vue-loader和vue-template-compiler"><a href="#二、安装vue-loader和vue-template-compiler" class="headerlink" title="二、安装vue-loader和vue-template-compiler"></a>二、安装vue-loader和vue-template-compiler</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">npm install vue-loader  vue-<span class="hljs-keyword">template</span>-compiler <span class="hljs-comment">--save-dev</span><br></code></pre></td></tr></table></figure><p>修改webpack.config.js的配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>          <span class="hljs-attribute">test</span>: /\.vue$/,<br>          use: [<span class="hljs-string">&#x27;vue-loader&#x27;</span>]<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="plugin的使用"><a href="#plugin的使用" class="headerlink" title="plugin的使用"></a>plugin的使用</h3><h4 id="loader和plugin区别"><a href="#loader和plugin区别" class="headerlink" title="loader和plugin区别"></a>loader和plugin区别</h4><ul><li>loader主要用于转换某些类型的模块，它是一个转换器。</li><li>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</li></ul><h4 id="plugin的使用过程："><a href="#plugin的使用过程：" class="headerlink" title="plugin的使用过程："></a>plugin的使用过程：</h4><ul><li>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li><li>步骤二：在webpack.config.js中的plugins中配置插件。</li></ul><h4 id="添加版权的Plugin（BannerPlugin）"><a href="#添加版权的Plugin（BannerPlugin）" class="headerlink" title="添加版权的Plugin（BannerPlugin）"></a>添加版权的Plugin（BannerPlugin）</h4><p>   修改webpack.config.js的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br>plugins: [<br>  <span class="hljs-keyword">new</span> webpack.BannerPlugin(<span class="hljs-string">&#x27;最终版权归cjy所有&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure><p>  重新打包程序后可以查看bundle.js文件的头部，看到版权信息。</p><h4 id="打包html的plugin（HtmlWebpackPlugin）"><a href="#打包html的plugin（HtmlWebpackPlugin）" class="headerlink" title="打包html的plugin（HtmlWebpackPlugin）"></a>打包html的plugin（HtmlWebpackPlugin）</h4><p>HtmlWebpackPlugin插件可以为我们做这些事情：</p><ol><li>自动生成一个index.html文件(可以指定模板来生成)</li><li>将打包的js文件，自动通过script标签插入到body中</li></ol><p>安装HtmlWebpackPlugin插件</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">npm install html-Webpack-Plugin --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>修改webpack.config.js文件中plugins部分的内容如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">HtmlWebpackPlugin</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="hljs-variable">plugins</span>: [<br>  <span class="hljs-variable">new</span> <span class="hljs-function"><span class="hljs-title">HtmlWebpackPlugin</span>(&#123;</span><br><span class="hljs-function">    <span class="hljs-variable">template</span>: <span class="hljs-string">&#x27;index.html&#x27;</span></span><br><span class="hljs-function">  &#125;)</span><br>]<br></code></pre></td></tr></table></figure><ul><li><strong>这里的template表示根据什么模板来生成index.html</strong></li><li><strong>另外，我们需要删除之前在output中添加的publicPath属性,否则插入的script标签中的src可能会有问题</strong></li></ul><h4 id="js压缩的Plugin"><a href="#js压缩的Plugin" class="headerlink" title="js压缩的Plugin"></a>js压缩的Plugin</h4><p>在项目发布之前，我们必然需要对js等文件进行压缩处理</p><p>使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install uglifyjs-webpack-plugin@<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> --save-dev<br></code></pre></td></tr></table></figure><p>修改webpack.config.js文件</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">Uglifyjs</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="hljs-variable">plugins</span>: [<br>  <span class="hljs-variable">new</span> <span class="hljs-function"><span class="hljs-title">Uglifyjs</span>()</span><br>]<br></code></pre></td></tr></table></figure><h3 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h3><p>​    webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p><p>安装webpack-dev-server</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install --save-dev webpack-dev-server@<span class="hljs-number">2</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：</strong></p><ul><li>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist</li><li>port：端口号</li><li>inline：页面实时刷新</li><li>historyApiFallback：在SPA页面中，依赖HTML5的history模式</li></ul><p>webpack.config.js文件配置修改如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">devServer</span>: &#123;<br>  <span class="hljs-attribute">contentBase</span>: <span class="hljs-string">&#x27;./dist&#x27;</span>,<br>  inline: true<br>&#125;<br></code></pre></td></tr></table></figure><p>在package.json配置另外一个scripts：–open参数表示直接打开浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --open --config ./build/dev.config.js&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端模块化</title>
    <link href="/2022/02/05/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/2022/02/05/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>常见的模块化规范</p><p>CommonJS、AMD、CMD，也有ES6的Modules。</p><a id="more"></a><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>模块化有两个核心：<strong>导出和导入</strong></p><p>CommonJS的导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>flag:ture,<br><span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> a + b<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> a * b<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CommonJS的导入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//CommonJS模块</span><br><span class="hljs-keyword">let</span> &#123;test,demo,flag&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>);<br><span class="hljs-comment">//等同于</span><br>let_mA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>);<br><span class="hljs-keyword">let</span> test = _mA.test;<br><span class="hljs-keyword">let</span> demo = _mA.demo;<br><span class="hljs-keyword">let</span> flag = _mA.flag;<br></code></pre></td></tr></table></figure><h3 id="ES6的export和import"><a href="#ES6的export和import" class="headerlink" title="ES6的export和import"></a>ES6的export和import</h3><h4 id="export基本使用"><a href="#export基本使用" class="headerlink" title="export基本使用"></a>export基本使用</h4><p><strong>export指令用于导出变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//info.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;cjy&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br><span class="hljs-comment">//另一种写法</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;cjy&#x27;</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br><span class="hljs-keyword">export</span>&#123;name,age&#125;<br></code></pre></td></tr></table></figure><p><strong>export指令用于导出函数或类</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">content</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(content);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br>&#125;<br><span class="hljs-keyword">export</span>&#123;test,Person&#125;<br></code></pre></td></tr></table></figure><p><strong>export default的使用</strong></p><p>  <strong>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且让导入者可以自己来命名,这个时候就可以使用export default</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//info.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;default function&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> myFunc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./info.js&#x27;</span><br>myFunc<br></code></pre></td></tr></table></figure><p><em>export default在同一个模块中，不允许同时存在多个。</em></p><h4 id="import基本使用"><a href="#import基本使用" class="headerlink" title="import基本使用"></a>import基本使用</h4><ol><li><p>使用<strong>export</strong>指令导出了模块对外提供的接口，就可以通过<strong>import</strong>命令来加载对应的这个模块</p></li><li><p>首先，我们需要在HTML代码中引入两个js文件<strong>，并且类型需要设置为</strong>module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;info.js&quot;</span> type=<span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;main.js&quot;</span> type=<span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>import指令用于导入模块中的内容，比如info.js的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>&#123;name,age&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./info.js&quot;</span><br><span class="hljs-built_in">console</span>.log(name,age)<br></code></pre></td></tr></table></figure></li></ol><p>*<em>通过可以导入模块中所有的export变量,但是通常情况下我们需要给</em>起一个别名，方便后续的使用**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> info <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./info.js&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件化开发3（slot）</title>
    <link href="/2022/02/03/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%913%EF%BC%88slot%EF%BC%89/"/>
    <url>/2022/02/03/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%913%EF%BC%88slot%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件化开发2</title>
    <link href="/2022/02/03/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%912/"/>
    <url>/2022/02/03/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%912/</url>
    
    <content type="html"><![CDATA[<h3 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a><strong>组件数据的存放</strong></h3><ol><li><strong>组件不可以访问Vue实例数据</strong></li><li><strong>组件对象也有一个data属性(也可以有methods等属性)</strong></li><li><strong>只是这个data属性必须是一个函数，而且这个函数返回一个对象，对象内部保存着数据</strong></li></ol><p><strong>为什么data在组件中必须是一个函数呢?原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。下面计数器的例子可以很好的说明这个问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>    &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;/div&gt;<br>    &lt;template id=<span class="hljs-string">&quot;div1&quot;</span>&gt;<br>        &lt;!-- 访问vue实例中的数据,不能显示 --&gt;<br>        &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> --&gt;<br>          &lt;!-- 访问cpn组件中的数据,能显示 --&gt;<br>        &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> &#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> --&gt;<br>        &lt;div&gt;<br>       &lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt; <br>        &lt;button @click=count++&gt;+&lt;/button&gt; <br>        &lt;button  @click=count--&gt;-&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;/template&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>    message: <span class="hljs-string">&#x27;你好！！！&#x27;</span>   <br><br>&#125;,<br>components: &#123;<br>    <span class="hljs-string">&#x27;cpn&#x27;</span>:&#123;<span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#div1&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            message: <span class="hljs-string">&quot;你好！！我是组件中的数据！！！&quot;</span>,<br>            count: <span class="hljs-number">0</span>,<br>          <br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// methods: &#123;</span><br>    <span class="hljs-comment">//     add()&#123;</span><br>    <span class="hljs-comment">//         this.count++;</span><br>    <span class="hljs-comment">//     &#125;,</span><br>    <span class="hljs-comment">//     reduce()&#123;           </span><br>    <span class="hljs-comment">//             this.count--;      </span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    &#125;<br>    <br>&#125;<br><br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><h4 id="1-通过props向子组件传递数据"><a href="#1-通过props向子组件传递数据" class="headerlink" title="1.通过props向子组件传递数据"></a>1.通过props向子组件传递数据</h4><h5 id="props基本用法"><a href="#props基本用法" class="headerlink" title="props基本用法"></a><strong>props基本用法</strong></h5><p>在组件中，使用选项props来声明需要从父级接收到的数据。</p><p>props的值有两种方式：</p><p><strong>方式一：字符串数组，数组中的字符串就是传递时的名称。</strong></p><p><strong>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>    &lt;cpn :childmessage=<span class="hljs-string">&quot;message&quot;</span>&gt; &lt;/cpn&gt;<br>    &lt;/div&gt;<br>    &lt;template id=<span class="hljs-string">&quot;div1&quot;</span>&gt;<br>        &lt;div&gt;<br>       &lt;h3&gt;&#123;&#123;childmessage&#125;&#125;&lt;/h3&gt; <br>    &lt;/div&gt;<br>    &lt;/template&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>    message: <span class="hljs-string">&#x27;你好！！！我是父组件的数据&#x27;</span><br>    &#125;,<br>    components: &#123;<br>        <span class="hljs-string">&#x27;cpn&#x27;</span>:&#123;<br>            template: <span class="hljs-string">&#x27;#div1&#x27;</span>,<br>            props: [<span class="hljs-string">&#x27;childmessage&#x27;</span>]<br>        &#125;<br>    &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">props: &#123;<br>  title: <span class="hljs-built_in">String</span>,<br>  likes: <span class="hljs-built_in">Number</span>,<br>  isPublished: <span class="hljs-built_in">Boolean</span>,<br>  commentIds: <span class="hljs-built_in">Array</span>,<br>  author: <span class="hljs-built_in">Object</span>,<br>  callback: <span class="hljs-built_in">Function</span>,<br>  contactsPromise: <span class="hljs-built_in">Promise</span> <span class="hljs-comment">// or any other constructor</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-通过事件向父组件发送消息"><a href="#2-通过事件向父组件发送消息" class="headerlink" title="2.通过事件向父组件发送消息"></a>2.通过事件向父组件发送消息</h4><p><strong>自定义事件的流程：</strong></p><p><strong>在子组件中，通过$emit()来触发事件。</strong></p><p><strong>在父组件中，通过v-on来监听子组件事件。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>        &lt;!-- 监听事件 --&gt;<br>    &lt;cpn @item-click=<span class="hljs-string">&quot;change&quot;</span>&gt;&lt;/cpn&gt;<br>    &lt;h1&gt;我是传过来的id:&#123;&#123;Fid&#125;&#125;&lt;/h1&gt;<br>    &lt;/div&gt;<br>    &lt;template id=<span class="hljs-string">&quot;div1&quot;</span>&gt;<br>        &lt;div&gt;<br>        &lt;button v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in categrories&quot;</span> @click=<span class="hljs-string">&quot;transfer(item)&quot;</span>&gt; &#123;&#123;item.name&#125;&#125;&lt;/button&gt;<br>        &#123;&#123;Transferid&#125;&#125;<br>        &lt;/div&gt;<br>    &lt;/template&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>    Fid: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    methods:&#123;<br>        <span class="hljs-function"><span class="hljs-title">change</span>(<span class="hljs-params">item</span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(item.name)<br>            <span class="hljs-built_in">this</span>.Fid = item.id<br>        &#125;<br>    &#125;,<br>    components:&#123;<br>        <span class="hljs-string">&#x27;cpn&#x27;</span>:&#123;<br>            template:<span class="hljs-string">&#x27;#div1&#x27;</span>,<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    categrories:[<br>                        &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;热门推荐&#x27;</span>&#125;,<br>                        &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;手机数码&#x27;</span>&#125;,<br>                        &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;家用家电&#x27;</span>&#125;,<br>                        &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;ddd&#x27;</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;电器办公&#x27;</span>&#125;,<br>                        &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;eee&#x27;</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;服装热卖&#x27;</span>&#125;<br><br>                    ],<br>                    Transferid: <span class="hljs-number">0</span><br>                &#125;<br>            &#125;,<br>            methods:&#123;<br>                <span class="hljs-function"><span class="hljs-title">transfer</span>(<span class="hljs-params">item</span>)</span>&#123;<br>                    <span class="hljs-comment">// console.log(item)</span><br>                    <span class="hljs-built_in">this</span>.Transferid = item.id<br>                    <span class="hljs-comment">//发射事件：自定义事件</span><br>                    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;item-click&#x27;</span>,item)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="父子组件的访问方式"><a href="#父子组件的访问方式" class="headerlink" title="父子组件的访问方式"></a><strong>父子组件的访问方式</strong></h3><h4 id="父组件访问子组件：使用-children或-refs"><a href="#父组件访问子组件：使用-children或-refs" class="headerlink" title="父组件访问子组件：使用$children或$refs"></a>父组件访问子组件：使用$children或$refs</h4><p><strong>this.$children是一个数组类型，它包含所有子组件对象。可以通过一个遍历，取出所有子组件的message状态。</strong></p><h4 id="children的缺陷："><a href="#children的缺陷：" class="headerlink" title="$children的缺陷："></a>$children的缺陷：</h4><p><strong>通过$children访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用$refs</strong></p><h4 id="refs的使用："><a href="#refs的使用：" class="headerlink" title="$refs的使用："></a>$refs的使用：</h4><ul><li><strong>$refs和ref指令通常是一起使用的。</strong></li><li><strong>首先，我们通过ref给某一个子组件绑定一个特定的ID。</strong></li><li><strong>其次，通过this.$refs.ID就可以访问到该组件了。</strong></li></ul><h4 id="子组件访问父组件：使用-parent"><a href="#子组件访问父组件：使用-parent" class="headerlink" title="子组件访问父组件：使用$parent"></a>子组件访问父组件：使用$parent</h4><ul><li><strong>尽管在Vue开发中，我们允许通过$parent来访问父组件，但是在真实开发中尽量不要这样做。子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了。</strong></li><li><strong>如果我们将子组件放在另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题。</strong></li><li><strong>另外，更不好做的是通过$parent直接修改父组件的状态，那么父组件中的状态将变得飘忽不定，很不利于我的调试和维护。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;!-- 父组件 --&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>    &lt;cpn1  ref=<span class="hljs-string">&quot;cpn1&quot;</span>&gt; &lt;/cpn1&gt;<br>   &lt;button @click=<span class="hljs-string">&quot;parentclick&quot;</span>&gt;显示所有子组件信息&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 子组件<span class="hljs-number">1</span> --&gt;<br>    &lt;template id=<span class="hljs-string">&quot;div1&quot;</span>&gt;<br>        &lt;div&gt;<br>            &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;<br>            &lt;cpn2 ref=<span class="hljs-string">&quot;cpn2&quot;</span>&gt;&lt;/cpn2&gt;<br>        &lt;/div&gt;<br>    &lt;/template&gt;<br>     &lt;!-- 子组件<span class="hljs-number">2</span> --&gt;<br>    &lt;template id=<span class="hljs-string">&quot;div2&quot;</span> &gt;<br>        &lt;div&gt;<br>            &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;<br>            &lt;button @click=<span class="hljs-string">&quot;cpn2click&quot;</span>&gt;显示父组件信息&lt;/button&gt;<br>        &lt;/div&gt;<br>    &lt;/template&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>        message: <span class="hljs-string">&#x27;我是根组件,组件1的父组件&#x27;</span><br>    &#125;,<br>    methods:&#123;<br>        <span class="hljs-function"><span class="hljs-title">parentclick</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//通过$children进行访问子组件</span><br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">this</span>.$children.length;i++)&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$children[i].message)<br>           &#125;<br>        <span class="hljs-comment">//通过$refs进行访问子组件</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.cpn1.message)<br>        &#125;<br>    &#125;,<br>    components:&#123;<br>        <span class="hljs-string">&#x27;cpn1&#x27;</span>: &#123;<br>            template:<span class="hljs-string">&#x27;#div1&#x27;</span>,<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    message: <span class="hljs-string">&#x27;我是组件1,是根组件的子组件，组件2的父组件&#x27;</span><br>                &#125;<br>            &#125;,<br>            components:&#123;<br>            <span class="hljs-string">&#x27;cpn2&#x27;</span>: &#123;<br>            template:<span class="hljs-string">&#x27;#div2&#x27;</span>,<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    message: <span class="hljs-string">&#x27;我是组件2&#x27;</span><br>                &#125;<br>            &#125;,<br>            methods:&#123;<br>                <span class="hljs-function"><span class="hljs-title">cpn2click</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-comment">//通过$parent进行访问父组件</span><br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$parent.message)<br>                    <span class="hljs-comment">//通过$root进行访问根组件</span><br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$root.message)<br>                &#125;<br>            &#125;<br>        &#125;<br>        &#125;<br>        &#125;,<br>       <br>    &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件化开发</title>
    <link href="/2022/02/02/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <url>/2022/02/02/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="1-Vue-extend-："><a href="#1-Vue-extend-：" class="headerlink" title="1.Vue.extend()："></a>1.Vue.extend()：</h4><ul><li>调用Vue.extend()创建的是一个组件构造器。 </li><li>通常在创建组件构造器时，传入template代表我们自定义组件的模板。</li><li>该模板就是在使用到组件的地方，要显示的HTML代码。</li></ul><h4 id="2-Vue-component-："><a href="#2-Vue-component-：" class="headerlink" title="2.Vue.component()："></a>2.Vue.component()：</h4><ul><li>调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</li><li>所以需要传递两个参数：1、注册组件的标签名 2、组件构造器</li></ul><h4 id="3-组件必须挂载在某个Vue实例下，否则它不会生效。"><a href="#3-组件必须挂载在某个Vue实例下，否则它不会生效。" class="headerlink" title="3.组件必须挂载在某个Vue实例下，否则它不会生效。"></a>3.组件必须挂载在某个Vue实例下，否则它不会生效。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>        &lt;!-- <span class="hljs-number">3.</span>使用组件 --&gt;<br>   &lt;cpn&gt;&lt;/cpn&gt;<br>   &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;/div&gt;<br>  &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">//1.创建组件构建器</span><br>        <span class="hljs-keyword">const</span> myComponent = Vue.extend(&#123;<br>            template: <span class="hljs-string">`</span><br><span class="hljs-string">            &lt;div&gt;</span><br><span class="hljs-string">        &lt;h2&gt;标题&lt;/h2&gt;</span><br><span class="hljs-string">        &lt;p&gt;哈哈哈&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">            `</span><br>        &#125;)<br>        <span class="hljs-comment">//2.注册组件，并且定义组件标签的名称</span><br>        Vue.component(<span class="hljs-string">&#x27;cpn&#x27;</span>,myComponent)<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h3><p>当我们通过<strong>调用Vue.component()注册组件时，组件的注册是全局的，这意味着该组件可以在任意Vue示例下使用。</strong></p><p><strong>如果我们注册的组件是挂载在某个实例中, 那么就是一个局部组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>    &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;/div&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app1&#x27;</span>&gt;<br>        &lt;!-- app实例下的组件，在app1中无作用 --&gt;<br>        &lt;cpn&gt;&lt;/cpn&gt;<br>        &lt;cpn1&gt;&lt;/cpn1&gt;<br>        &lt;/div&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-keyword">const</span> myComponent = Vue.extend(&#123;<br>        template: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">        &lt;h2&gt;标题&lt;/h2&gt;</span><br><span class="hljs-string">        &lt;p&gt;哈哈哈&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">        `</span><br>    &#125;)<br><span class="hljs-comment">// 全局组件</span><br>    Vue.component(<span class="hljs-string">&#x27;cpn1&#x27;</span>,myComponent);<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>    <br>    &#125;,<br>    methods:&#123;<br>    <br>    &#125;,<br>    <span class="hljs-comment">// 局部组件，只在当前实例中可以起作用</span><br>    components: &#123;<br>        <span class="hljs-string">&#x27;cpn&#x27;</span>: myComponent<br>    &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">let</span> app1 = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app1&#x27;</span>,<br>        components:&#123;<br>            <br>        &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h3><p><strong>父子组件错误用法：以子标签的形式在Vue实例中使用</strong></p><p><strong>因为当子组件注册到父组件的components时，Vue会编译好父组件的模块，该模板的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中的内容了），<child-cpn></child-cpn>是只能在父组件中被识别的。</strong></p><p><strong>类似这种用法，<child-cpn></child-cpn>是会被浏览器忽略的。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>        &lt;cpn&gt;&lt;/cpn&gt;<br>        &lt;childcpn&gt;&lt;/childcpn&gt;<br>    &lt;/div&gt;<br><br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-comment">//创建子组件构建器</span><br>         <span class="hljs-keyword">const</span> cpnc2 =  Vue.extend(&#123;<br>        template: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;我是子组件&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        `</span><br>    &#125;)<br>     <span class="hljs-comment">//创建父组件构建器</span><br>    <span class="hljs-keyword">const</span> myComponent =  Vue.extend(&#123;<br>        template: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;我是父组件&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        `</span>,<br>        components:&#123;<br>            childcpn : cpnc2<br>        &#125;<br>    &#125;)<br>   <span class="hljs-comment">//注册父组件</span><br>    Vue.component(<span class="hljs-string">&#x27;cpn&#x27;</span>,myComponent)<br> <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>    &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;cpn2&gt;&lt;/cpn2&gt;<br>    &lt;/div&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">//注册全局组件语法糖</span><br>        Vue.component(<span class="hljs-string">&#x27;cpn&#x27;</span>,&#123;<br>            template: <span class="hljs-string">`</span><br><span class="hljs-string">            &lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;我是组件&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">            `</span><br>        &#125;)<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-comment">//注册局部组件语法糖</span><br>    components: &#123;<br>        cpn2:&#123;<br>            template: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">        &lt;h1&gt;我是组件2&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;/div&gt;`</span><br>        &#125;<br>    &#125;<br>    <br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="模板的分离写法"><a href="#模板的分离写法" class="headerlink" title="模板的分离写法"></a>模板的分离写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>    &lt;cpn&gt;&lt;/cpn&gt;<br>    &lt;/div&gt;<br>&lt;!--<span class="hljs-number">1.</span>script标签, 注意:类型必须是text/x-template--&gt;<br>&lt;!--<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/x-template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span>--&gt;</span><br>&lt;!--&lt;div&gt;--&gt;<br>  &lt;!--&lt;h2&gt;我是标题&lt;/h2&gt;--&gt;<br>  &lt;!--&lt;p&gt;我是内容,哈哈哈&lt;/p&gt;--&gt;<br><span class="xml"><span class="hljs-comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--&lt;/script&gt;</span></span>--&gt;<br><br>&lt;!--<span class="hljs-number">2.</span>template标签--&gt;<br>    &lt;template id=<span class="hljs-string">&quot;divide&quot;</span>&gt;<br>        &lt;div&gt;<br>            &lt;h1&gt;我是组件&lt;/h1&gt;<br>            &lt;/div&gt;<br>    &lt;/template&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    components: &#123;<br>        <span class="hljs-string">&#x27;cpn&#x27;</span>:&#123;<br>            template: <span class="hljs-string">&#x27;#divide&#x27;</span><br>        &#125;<br>    &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-model的使用</title>
    <link href="/2022/02/02/v-model%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/02/02/v-model%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="v-model的基本使用"><a href="#v-model的基本使用" class="headerlink" title="v-model的基本使用"></a>v-model的基本使用</h3><p> v-model指令的作用：</p><ul><li>是便捷的设置和获取表单元素的值；</li><li>绑定的数据会和表单元素值相关联</li><li>绑定的数据和表单元素的值双向绑定 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;v-model&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;!-- 键控代码<span class="hljs-number">38</span>代表上上箭头 --&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span>  v-model.lazy=<span class="hljs-string">&quot;message&quot;</span> @keyup.enter=<span class="hljs-string">&quot;GetM&quot;</span> @keyup<span class="hljs-number">.38</span>=<span class="hljs-string">&quot;SetM&quot;</span>&gt;<br>    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>    &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&quot;#app&quot;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&quot;陈建&quot;</span>,<br>            &#125;,<br>            methods:&#123;<br>                GetM:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    alert(<span class="hljs-built_in">this</span>.message+<span class="hljs-string">&quot;你好！&quot;</span>);<br>                &#125;,<br>                SetM:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">this</span>.message=<span class="hljs-string">&quot;老王&quot;</span>;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="v-model的原理"><a href="#v-model的原理" class="headerlink" title="v-model的原理"></a>v-model的原理</h3><p>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</p><ol><li><p><strong>v-bind绑定一个value属性</strong></p></li><li><p><strong>v-on指令给当前元素绑定input事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>等同于<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-bind:value=<span class="hljs-string">&quot;message&quot;</span> v-on:input=<span class="hljs-string">&quot;message = $event.target.value&quot;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>  &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  &lt;!--<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>--&gt;</span><br>  &lt;!--&lt;input type=&quot;text&quot; :value=&quot;message&quot; @input=&quot;valueChange&quot;&gt;--&gt;<br>  &lt;input type=&quot;text&quot; :value=&quot;message&quot; @input=&quot;message = $event.target.value&quot;&gt;<br>  &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br><br>&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>  const app = new Vue(&#123;<br>    el: &#x27;#app&#x27;,<br>    data: &#123;<br>      message: &#x27;你好啊&#x27;<br>    &#125;,<br>    methods: &#123;<br>      valueChange(event) &#123;<br>        this.message = event.target.value;<br>      &#125;<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-model结合radio类型"><a href="#v-model结合radio类型" class="headerlink" title="v-model结合radio类型"></a>v-model结合radio类型</h3><p>v-model结合radio类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br> &lt;!-- 在radio中具有相同的name属性可以实现单选，<br>在vue中只要v-model等于同一个数据值，也可以实现这一功能 --&gt;<br>  &lt;!-- &lt;label&gt;标签的作用是为鼠标用户改进了可用性，<br>当用户点击&lt;label&gt;标签中的文本时，<br>浏览器就会自动将焦点转到和该标签相关联的控件上；<br>&lt;label&gt;标签在单选按钮和复选按钮上经常被使用，<br>使用该标签后，你点击单选按钮或复选按钮的文本也是可以选中的。<br> &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;关联控件的id&quot;</span> form=<span class="hljs-string">&quot;所属表单id列表&quot;</span>&gt;文本内容&lt;/label&gt;<br>        --&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span>  id=<span class="hljs-string">&quot;male&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;男<br>    &lt;/label&gt;<br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;radio&quot;</span>  id=<span class="hljs-string">&quot;female&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;女<br>&lt;/label&gt;<br>        &lt;h2&gt;您选择的性别是：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>    sex: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    methods:&#123;<br>    &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="v-model结合checkbox类型"><a href="#v-model结合checkbox类型" class="headerlink" title="v-model结合checkbox类型"></a>v-model结合checkbox类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&#x27;app&#x27;</span>&gt;<br>         &lt;!--<span class="hljs-number">1.</span>checkbox单选框--&gt;··<br>    &lt;label id=<span class="hljs-string">&quot;agree&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;同意协议&quot;</span> id=<span class="hljs-string">&quot;agree&quot;</span> v-model=<span class="hljs-string">&quot;IsAgree&quot;</span>&gt;同意协议<br>    &lt;/label&gt;<br>    &lt;h2&gt; 您选择的是：&#123;&#123;IsAgree&#125;&#125;&lt;/h2&gt;<br>    &lt;button :disabled=<span class="hljs-string">&quot;!IsAgree&quot;</span>&gt;下一步&lt;/button&gt;<br>    <br>  &lt;!--<span class="hljs-number">2.</span>checkbox多选框--&gt;<br>  &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;篮球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;篮球<br>  &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;足球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;足球<br>  &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;乒乓球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;乒乓球<br>  &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> value=<span class="hljs-string">&quot;羽毛球&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;羽毛球<br>  &lt;h2&gt; 您选择的是:&lt;/h2&gt;<br>  &lt;ul&gt;<br>      &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in hobbies&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>  &lt;/ul&gt;<br><br>  &lt;label v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in originHobbies&quot;</span> :<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> :value=<span class="hljs-string">&quot;item&quot;</span> :id=<span class="hljs-string">&quot;item&quot;</span> v-model=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;&#123;&#123;item&#125;&#125;<br>  &lt;/label&gt;<br>    &lt;/div&gt;<br>    &lt;script src=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data :&#123;<br>    IsAgree: <span class="hljs-literal">false</span>,<br>    hobbies: [],<br>    originHobbies: [<span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-string">&#x27;足球&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>, <span class="hljs-string">&#x27;羽毛球&#x27;</span>, <span class="hljs-string">&#x27;台球&#x27;</span>, <span class="hljs-string">&#x27;高尔夫球&#x27;</span>]<br>    &#125;,<br>    methods:&#123;<br>    <br>    &#125;<br>    &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="v-model结合select类型"><a href="#v-model结合select类型" class="headerlink" title="v-model结合select类型"></a>v-model结合select类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>  &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  &lt;!--<span class="hljs-number">1.</span>选择一个--&gt;<br>  &lt;select name=<span class="hljs-string">&quot;abc&quot;</span> v-model=<span class="hljs-string">&quot;fruit&quot;</span>&gt;<br>    &lt;option value=<span class="hljs-string">&quot;苹果&quot;</span>&gt;苹果&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;香蕉&quot;</span>&gt;香蕉&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;榴莲&quot;</span>&gt;榴莲&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;葡萄&quot;</span>&gt;葡萄&lt;/option&gt;<br>  &lt;/select&gt;<br>  &lt;h2&gt;您选择的水果是: &#123;&#123;fruit&#125;&#125;&lt;/h2&gt;<br><br>  &lt;!--<span class="hljs-number">2.</span>选择多个--&gt;<br>  &lt;select name=<span class="hljs-string">&quot;abc&quot;</span> v-model=<span class="hljs-string">&quot;fruits&quot;</span> multiple&gt;<br>    &lt;option value=<span class="hljs-string">&quot;苹果&quot;</span>&gt;苹果&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;香蕉&quot;</span>&gt;香蕉&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;榴莲&quot;</span>&gt;榴莲&lt;/option&gt;<br>    &lt;option value=<span class="hljs-string">&quot;葡萄&quot;</span>&gt;葡萄&lt;/option&gt;<br>  &lt;/select&gt;<br>  &lt;h2&gt;您选择的水果是: &#123;&#123;fruits&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br><br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data: &#123;<br>      message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>      fruit: <span class="hljs-string">&#x27;香蕉&#x27;</span>,<br>      fruits: []<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="v-model修饰符的使用"><a href="#v-model修饰符的使用" class="headerlink" title="v-model修饰符的使用"></a>v-model修饰符的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>  &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>  &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  &lt;!--<span class="hljs-number">1.</span>修饰符: lazy 实现懒加载--&gt;<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model.lazy=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>  &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;<br><br><br>  &lt;!--<span class="hljs-number">2.</span>修饰符: number 限定输入为numberl类型--&gt;<br>  &lt;input type=<span class="hljs-string">&quot;number&quot;</span> v-model.number=<span class="hljs-string">&quot;age&quot;</span>&gt;<br>  &lt;h2&gt;&#123;&#123;age&#125;&#125;-&#123;&#123;<span class="hljs-keyword">typeof</span> age&#125;&#125;&lt;/h2&gt;<br><br>  &lt;!--<span class="hljs-number">3.</span>修饰符: trim 去除空格--&gt;<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model.trim=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>  &lt;h2&gt;您输入的名字:&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br><br>&lt;script src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data: &#123;<br>      message: <span class="hljs-string">&#x27;你好啊&#x27;</span>,<br>      age: <span class="hljs-number">0</span>,<br>      name: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">var</span> age = <span class="hljs-number">0</span><br>  age = <span class="hljs-string">&#x27;1111&#x27;</span><br>  age = <span class="hljs-string">&#x27;222&#x27;</span><br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-for补充</title>
    <link href="/2022/01/31/v-for%E8%A1%A5%E5%85%85/"/>
    <url>/2022/01/31/v-for%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h3 id="哪些数组方法是响应式的？"><a href="#哪些数组方法是响应式的？" class="headerlink" title="哪些数组方法是响应式的？"></a>哪些数组方法是响应式的？</h3><p>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p><ul><li><p>push()， 在数组最后面添加元素</p></li><li><p>pop()，删除数组中的最后一个元素</p></li><li><p>shift()， 删除数组中的第一个元素</p></li><li><p>unshift()， 在数组最前面添加元素</p></li><li><p>splice()， 删除元素/插入元素/替换元素</p><pre><code>    1.删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)    2.替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素    3.插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素</code></pre></li><li><p>sort()，数组排序</p></li><li><p>reverse()，反转数据</p></li><li><p>Vue提供的set方法，通过数组下标动态更改数据</p><p><strong>set(要修改的对象, 索引值, 修改后的值)</strong><br> <strong>Vue.set(this.letters, 0, ‘bbbbbb’)</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in letters&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data: &#123;<br><span class="javascript">      letters: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]</span><br>    &#125;,<br>    methods: &#123;<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">btnClick</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 1.push方法</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.push(&#x27;aaa&#x27;)</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.push(&#x27;aaaa&#x27;, &#x27;bbbb&#x27;, &#x27;cccc&#x27;)</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 2.pop(): 删除数组中的最后一个元素</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.pop();</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 3.shift(): 删除数组中的第一个元素</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.shift();</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 4.unshift(): 在数组最前面添加元素</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.unshift()</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.unshift(&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;)</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 5.splice作用: 删除元素/插入元素/替换元素</span></span><br><span class="javascript">        <span class="hljs-comment">// 删除元素: 第二个参数传入你要删除几个元素(如果没有传,就删除后面所有的元素)</span></span><br><span class="javascript">        <span class="hljs-comment">// 替换元素: 第二个参数, 表示我们要替换几个元素, 后面是用于替换前面的元素</span></span><br><span class="javascript">        <span class="hljs-comment">// 插入元素: 第二个参数, 传入0, 并且后面跟上要插入的元素</span></span><br><span class="javascript">        <span class="hljs-comment">// splice(start)</span></span><br><span class="javascript">        <span class="hljs-comment">// splice(start):</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.letters.splice(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-comment">// this.letters.splice(1, 0, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;)</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 5.sort()</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.sort()</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 6.reverse()</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.reverse()</span></span><br><br><span class="javascript">        <span class="hljs-comment">// 注意: 通过索引值修改数组中的元素，不是响应式的</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters[0] = &#x27;bbbbbb&#x27;;</span></span><br><span class="javascript">        <span class="hljs-comment">// this.letters.splice(0, 1, &#x27;bbbbbb&#x27;)</span></span><br><span class="javascript">        <span class="hljs-comment">// set(要修改的对象, 索引值, 修改后的值)</span></span><br><span class="javascript">        <span class="hljs-comment">// Vue.set(this.letters, 0, &#x27;bbbbbb&#x27;)</span></span><br>      &#125;<br>    &#125;<br>  &#125;)<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="登录切换小案例"><a href="#登录切换小案例" class="headerlink" title="登录切换小案例"></a>登录切换小案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=</span></span><br><span class="hljs-tag"><span class="hljs-string"></span></span><br><span class="hljs-tag"><span class="hljs-string">  , initial-scale=1.0&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isUser&quot;</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span> &gt;</span>&#123;&#123;username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户账号&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span> &gt;</span>&#123;&#123;email&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户邮箱&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isUser =! isUser&quot;</span>&gt;</span>切换类型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">   el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>      data :&#123;<br><span class="javascript">        username: <span class="hljs-string">&quot;用户账号:&quot;</span>,</span><br><span class="javascript">        email: <span class="hljs-string">&quot;邮箱账号:&quot;</span>,</span><br><span class="javascript">        isUser: <span class="hljs-literal">true</span></span><br>  &#125;<br> &#125;)<br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="案例小问题"><a href="#案例小问题" class="headerlink" title="案例小问题"></a><strong>案例小问题</strong></h4><p>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。但是按道理讲，我们应该切换到另外一个</p><p>input元素中了。在另一个input元素中，我们并没有输入内容。为什么会出现这个问题呢？</p><h4 id="问题解答："><a href="#问题解答：" class="headerlink" title="问题解答："></a>问题解答：</h4><p><strong>这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。</strong></p><p>在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>如果我们不希望Vue出现类似重复利用的问题，<strong>可以给对应的input添加key</strong></p><p><strong>并且我们需要保证key的不同</strong></p><h3 id="当前字体点击后变色"><a href="#当前字体点击后变色" class="headerlink" title="当前字体点击后变色"></a>当前字体点击后变色</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.active</span>&#123;</span><br>            color: red;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in movies&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">:class</span>= <span class="hljs-string">&quot;&#123;active: currentIndex === index&#125;&quot;</span></span><br><span class="hljs-tag">       @<span class="hljs-attr">click</span>= <span class="hljs-string">&quot;fun(index)&quot;</span></span><br><span class="hljs-tag">       &gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">   <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">   el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>   data :&#123;<br><span class="javascript">   movies: [<span class="hljs-string">&quot;长津湖&quot;</span>,<span class="hljs-string">&quot;战狼&quot;</span>,<span class="hljs-string">&quot;湄公河&quot;</span>],</span><br>   currentIndex: 0<br>   &#125;,<br>   methods:&#123;<br><span class="javascript">   <span class="hljs-function"><span class="hljs-title">fun</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.currentIndex = index;</span><br>   &#125;<br>   &#125;<br>   &#125;)<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象（中）</title>
    <link href="/2022/01/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <url>/2022/01/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="y继承性"><a href="#y继承性" class="headerlink" title="y继承性"></a>y继承性</h3><h4 id="1-继承性的好处"><a href="#1-继承性的好处" class="headerlink" title="1.继承性的好处"></a>1.继承性的好处</h4><ol><li>减少了代码的冗余，提高了代码的复用性。</li><li>便于功能的扩展。</li><li>为之后多态性的使用，提供了前提。</li></ol><h4 id="2-继承性的格式"><a href="#2-继承性的格式" class="headerlink" title="2.继承性的格式"></a>2.继承性的格式</h4><p>  <strong>class A extends B{}</strong></p><p>  A:子类、派生类</p><p>  B：父类，基类</p><h4 id="3-子类继承父类以后有哪些不同？"><a href="#3-子类继承父类以后有哪些不同？" class="headerlink" title="3.子类继承父类以后有哪些不同？"></a>3.子类继承父类以后有哪些不同？</h4><p> <strong>体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。</strong></p><ul><li><p>特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只有因为封装性的影响，使得子类不能直接调用父类的结构而已。</p><p><strong>子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。</strong></p></li></ul><ul><li><pre><code>   子类和父类的关系，不同于子集和集合的关系。</code></pre></li><li><pre><code>   extends：延展、扩展</code></pre></li></ul><h4 id="4-Java中继承性的说明"><a href="#4-Java中继承性的说明" class="headerlink" title="4.Java中继承性的说明"></a>4.Java中继承性的说明</h4><ul><li>一个类可以被多个子类继承。</li><li> Java中类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li><li>子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</li></ul><h4 id="5-java-lang-Object类的理解"><a href="#5-java-lang-Object类的理解" class="headerlink" title="5.java.lang.Object类的理解"></a>5.java.lang.Object类的理解</h4><ul><li>如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类</li></ul><ul><li>   所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类</li><li>   意味着，所有的java类具有java.lang.Object类声明的功能。</li></ul><h3 id="方法的重写-override-overwrite"><a href="#方法的重写-override-overwrite" class="headerlink" title="方法的重写(override / overwrite)"></a>方法的重写(override / overwrite)</h3><p>1.重写：子类继承父类以后，可以对父类中<strong>同名同参数的方法</strong>，进行覆盖操作</p><p>2.应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，<strong>实际执行的是子类重写父类的方法</strong>。</p><p>3.重写的规定：</p><p>方法的声明： 权限修饰符  返回值类型  方法名(形参列表) throws 异常的类型{</p><p>//方法体   }</p><p><strong>约定俗称</strong>：<strong>子类中的叫重写的方法，父类中的叫被重写的方法</strong></p><p>① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</p><p>② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><p><strong>特殊情况</strong>：<strong>子类不能重写父类中声明为private权限的方法</strong></p><p>③ 返回值类型：</p><p>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</p><p>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</p><p>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)</p><p>④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><p><strong>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）</strong></p><h3 id="super关键字的使用"><a href="#super关键字的使用" class="headerlink" title="super关键字的使用"></a>super关键字的使用</h3><h4 id="1-super理解为：父类的"><a href="#1-super理解为：父类的" class="headerlink" title="1.super理解为：父类的"></a>1.super理解为：父类的</h4><h4 id="2-super可以用来调用：属性、方法、构造器"><a href="#2-super可以用来调用：属性、方法、构造器" class="headerlink" title="2.super可以用来调用：属性、方法、构造器"></a>2.super可以用来调用：属性、方法、构造器</h4><h4 id="3-super的使用：调用属性和方法"><a href="#3-super的使用：调用属性和方法" class="headerlink" title="3.super的使用：调用属性和方法"></a>3.super的使用：调用属性和方法</h4><ul><li>我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li><li> <strong>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</strong></li><li><strong>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</strong></li></ul><h4 id="4-super调用构造器"><a href="#4-super调用构造器" class="headerlink" title="4.super调用构造器"></a>4.super调用构造器</h4><ul><li>  我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li><li><strong>“super(形参列表)”的使用，必须声明在子类构造器的首行！</strong></li><li><strong>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现</strong></li><li>在构造器的首行，没有显式的声明”this(形参列表)”或”super(形参列表)”，<strong>则默认调用的是父类中空参的构造器：super()</strong></li><li>在类的多个构造器中，**至少有一个类的构造器中使用了”super(形参列表)”**，调用父类中的构造</li></ul><h3 id="子类对象实例化的全过程"><a href="#子类对象实例化的全过程" class="headerlink" title="子类对象实例化的全过程"></a>子类对象实例化的全过程</h3><h4 id="1-从结果上来看：（继承性）"><a href="#1-从结果上来看：（继承性）" class="headerlink" title="1.从结果上来看：（继承性）"></a>1.从结果上来看：（继承性）</h4><ul><li>子类继承父类以后，就获取了父类中声明的属性或方法。</li><li>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</li></ul><h4 id="2-从过程上来看："><a href="#2-从过程上来看：" class="headerlink" title="2.从过程上来看："></a>2.从过程上来看：</h4><ul><li><pre><code>    当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，...</code></pre></li><li>   直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有</li><li>   父类中的结构，子类对象才可以考虑进行调用。</li><li><strong>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/01/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/01/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="一、变量的赋值-值传递机制"><a href="#一、变量的赋值-值传递机制" class="headerlink" title="一、变量的赋值,值传递机制"></a>一、变量的赋值,值传递机制</h3><p><strong>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</strong></p><p><strong>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</strong></p><h3 id="二、方法的形参的传递机制：值传递"><a href="#二、方法的形参的传递机制：值传递" class="headerlink" title="二、方法的形参的传递机制：值传递"></a>二、方法的形参的传递机制：值传递</h3><p>形参：方法定义时，声明的小括号内的参数</p><p>实参：方法调用时，实际传递给形参的数据</p><p>值传递机制：</p><p><strong>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。</strong></p><p><strong>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</strong></p><h3 id="三、递归练习"><a href="#三、递归练习" class="headerlink" title="三、递归练习"></a>三、递归练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.OOP;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        RecursionTest recursionTest = <span class="hljs-keyword">new</span> RecursionTest();<br>        System.out.println(recursionTest.getF(<span class="hljs-number">10</span>));<br>        System.out.println(<span class="hljs-keyword">new</span> RecursionTest().Fibonacci(<span class="hljs-number">4</span>));<br>    &#125;<br>    <span class="hljs-comment">//f(0)=1,f(1)=4,f(n+2)=2*f(n+1)+f(n),其中n是大于0的整数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (n==<span class="hljs-number">0</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*getF(n-<span class="hljs-number">1</span>)+getF(n-<span class="hljs-number">2</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//斐波那契数列 f(1)=1,f(2)=1,f(n)=f(n-1)+f(n-2)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (i==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Fibonacci(i-<span class="hljs-number">1</span>)+Fibonacci(i-<span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="四、封装性"><a href="#四、封装性" class="headerlink" title="四、封装性"></a>四、封装性</h3><p>   <strong>面向对象的特征一：封装与隐藏</strong>   </p><h4 id="一、问题的引入："><a href="#一、问题的引入：" class="headerlink" title="一、问题的引入："></a>一、问题的引入：</h4><ul><li><p>当我们创建一个类的对象以后，我们可以通过”对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到</p></li><li><p>属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们往往需要给属性赋值</p></li><li><p>加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。（比如：setLegs()）</p></li><li><p>同时，我们需要避免用户再使用”对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private).</p></li><li><p>–&gt;此时，针对于属性就体现了封装性。</p><h4 id="二、封装性的体现："><a href="#二、封装性的体现：" class="headerlink" title="二、封装性的体现："></a>二、封装性的体现：</h4></li><li><p>我们将类的属性xxx私有化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值</p></li><li><p>拓展：封装性的体现：① 如上  ② 不对外暴露的私有的方法  ③ 单例模式   …</p><h4 id="三、封装性的体现，需要权限修饰符来配合。"><a href="#三、封装性的体现，需要权限修饰符来配合。" class="headerlink" title="三、封装性的体现，需要权限修饰符来配合。"></a>三、封装性的体现，需要权限修饰符来配合。</h4><p>1.Java规定的4种权限（从小到大排列）：private、缺省、protected 、public </p><p>2.4种权限可以用来修饰类及类的内部结构：属性、方法、构造器、内部类</p><p>3.具体的，4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类</p></li><li><p>修饰类的话，只能使用：缺省、public</p></li><li><p>总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。</p><h3 id="五、类的结构之三：构造器（或构造方法、constructor）的使用"><a href="#五、类的结构之三：构造器（或构造方法、constructor）的使用" class="headerlink" title="五、类的结构之三：构造器（或构造方法、constructor）的使用"></a>五、类的结构之三：构造器（或构造方法、constructor）的使用</h3><ul><li><h4 id="一、构造器的作用："><a href="#一、构造器的作用：" class="headerlink" title="一、构造器的作用："></a>一、构造器的作用：</h4></li><li><p><strong>1.创建对象</strong></p></li><li><p><strong>2.初始化对象的信息</strong></p></li><li><h4 id="二、说明："><a href="#二、说明：" class="headerlink" title="二、说明："></a>二、说明：</h4><p> <strong>1.如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器</strong></p><p> <strong>2.定义构造器的格式：权限修饰符  类名(形参列表){}</strong></p><p> <strong>3.一个类中定义的多个构造器，彼此构成重载</strong></p><p> <strong>4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</strong></p><p> <strong>5.一个类中，至少会有一个构造器。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>     <span class="hljs-comment">//创建类的对象:new + 构造器</span><br>     Person p = <span class="hljs-keyword">new</span> Person();<br>     p.eat();<br>       <br>     Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>);<br>       <br>     System.out.println(p1.name);<br>     &#125;<br>     &#125;<br>       <br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>  <span class="hljs-comment">//属性</span><br>  String name;<br>  <span class="hljs-keyword">int</span> age;<br>  <br>       <br>  <span class="hljs-comment">//构造器</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;Person().....&quot;</span>);<br>  &#125;<br>       <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String n)</span></span>&#123;<br>  name = n;<br>  <br>  &#125;<br>       <br>  <span class="hljs-comment">//</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String n,<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>  name = n;<br>  age = a;<br>  &#125;<br>       <br>  <span class="hljs-comment">//方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>  &#125;<br>       <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;人可以学习&quot;</span>);<br>  &#125;<br>       <br>  &#125;<br>       <br>       <br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="六、属性赋值总结"><a href="#六、属性赋值总结" class="headerlink" title="六、属性赋值总结"></a>六、属性赋值总结</h3><ol><li><p>默认初始化</p></li><li><p>显式初始化</p></li><li><p>构造器中赋值</p></li><li><p>通过“对象.方法”或“对象.属性”的方式，赋值。</p><p><strong>以上操作的先后顺序</strong>：<strong>1-2-3-4</strong></p></li></ol><h3 id="七、this关键字"><a href="#七、this关键字" class="headerlink" title="七、this关键字"></a>七、this关键字</h3><h5 id="1-this可以用来修饰、调用：属性、方法、构造器"><a href="#1-this可以用来修饰、调用：属性、方法、构造器" class="headerlink" title="1.this可以用来修饰、调用：属性、方法、构造器"></a>1.this可以用来修饰、调用：属性、方法、构造器</h5><h5 id="2-this修饰属性和方法："><a href="#2-this修饰属性和方法：" class="headerlink" title="2.this修饰属性和方法："></a>2.this修饰属性和方法：</h5><p><strong>this理解为：当前对象  或 当前正在创建的对象</strong></p><p>  2.1  在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p><p> 2.2 在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p><h5 id="3-this调用构造器"><a href="#3-this调用构造器" class="headerlink" title="3.this调用构造器"></a>3.this调用构造器</h5><p>① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</p><p>② 构造器中不能通过”this(形参列表)”方式调用自己</p><p>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”</p><p>④ 规定：”this(形参列表)”必须声明在当前构造器的首行</p><p>⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p><h3 id="八、package关键字的使用"><a href="#八、package关键字的使用" class="headerlink" title="八、package关键字的使用"></a>八、package关键字的使用</h3><p>1.为了更好的实现项目中类的管理，提供包的概念</p><p>2.使用package声明类或接口所属的包，声明在源文件的首行</p><p>3.包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</p><p>4.每”.”一次，就代表一层文件目录。</p><p><strong>补充：同一个包下，不能命名同名的接口、类。</strong></p><p><strong>不同的包下，可以命名同名的接口、类。</strong></p><h3 id="九、import关键字的使用"><a href="#九、import关键字的使用" class="headerlink" title="九、import关键字的使用"></a>九、import关键字的使用</h3><p>import:导入</p><ol><li><p>在源文件中显式的使用import结构导入指定包下的类、接口</p></li><li><p>声明在包的声明和类的声明之间</p></li><li><p>如果需要导入多个结构，则并列写出即可</p></li><li><p>可以使用”xxx.*”的方式，表示可以导入xxx包下的所有结构</p></li><li><p>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</p></li><li><p>如果使用的类或接口是本包下定义的，则可以省略import结构</p></li><li><p>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//全类名的方式显示</span><br>Date date = <span class="hljs-keyword">new</span> Date();<br>java.sql.Date date1 = <span class="hljs-keyword">new</span> java.sql.Date(<span class="hljs-number">5243523532535L</span>);<br></code></pre></td></tr></table></figure></li></ol><ol start="8"><li><p>使用”xxx.*”方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br></code></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>import static:导入指定类或接口中的静态结构:属性或方法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.System.*;<br>out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">long</span> num = round(<span class="hljs-number">123.434</span>);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6关键字</title>
    <link href="/2022/01/27/ES6%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2022/01/27/ES6%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>什么是ES6？ECMAScript 6（简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。其中相比较于ES5新增了诸多的特性，并且ES6可转换为ES5的语法。</p><a id="more"></a><h2 id="一、let关键字"><a href="#一、let关键字" class="headerlink" title="一、let关键字"></a>一、let关键字</h2><ul><li><p>let和var的区别在于申明变量的作用域，var声明的作用域是全局的，<strong>let申明的变量作用域是块级作用域</strong>。最主要的体现就在于循环之中，我们需要通过循环基数（即index）来做些什么的时候，再使用var申明的时候我们的常常使用自运行函数来解决这一问题，但是使用let之后，js会自动的帮我们确定当前循环的变量基数的运行区间，不再会受到全局的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 输出1</span><br>&#125;;<br><br> <span class="hljs-number">2.</span>没有块级作用域引起的问题: <span class="hljs-keyword">if</span>的块级<br>  <span class="hljs-keyword">var</span> func;<br> <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>   <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;why&#x27;</span>;<br>   func = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(name);<br>     &#125;<br>      func()<br> &#125;<br> name = <span class="hljs-string">&#x27;kobe&#x27;</span><br>  func()<br>  <span class="hljs-built_in">console</span>.log(name);<br><br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;why&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc</span>(<span class="hljs-params">bbb</span>) </span>&#123; <span class="hljs-comment">// bbb = &#x27;why&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(bbb);<br>  &#125;<br>  abc(name)<br>  name = <span class="hljs-string">&#x27;kobe&#x27;</span><br><br>  <span class="hljs-comment">// 3.没有块级作用域引起的问题: for的块级</span><br>  <span class="hljs-comment">// 为什么闭包可以解决问题: 函数是一个作用域.</span><br>  <span class="hljs-comment">// var btns = document.getElementsByTagName(&#x27;button&#x27;);</span><br>  <span class="hljs-comment">// for (var i=0; i&lt;btns.length; i++) &#123;</span><br>  <span class="hljs-comment">//   (function (num) &#123; // 0</span><br>  <span class="hljs-comment">//     btns[i].addEventListener(&#x27;click&#x27;, function () &#123;</span><br>  <span class="hljs-comment">//       console.log(&#x27;第&#x27; + num + &#x27;个按钮被点击&#x27;);</span><br>  <span class="hljs-comment">//     &#125;)</span><br>  <span class="hljs-comment">//   &#125;)(i)</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>    btns[i].addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第&#x27;</span> + i + <span class="hljs-string">&#x27;个按钮被点击&#x27;</span>);<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>let不再存在变量提升的现象，必须声明之后在使用。</strong> 这一效果的实现方式是展示性死区，再JS解析到当前代码段之中有通过let申明的变量，则再这一变量声明的代码真正执行之前的区域就是对应的死区，死区之中对于当前变量的使用都将会报错。如果再当前区域外通过var声明了全局变量，但是此<strong>区域之中有let声明的名称相同的变量则，这一变量再这一区域之中会被封锁，全局同名变量将会没有作用。</strong></p></li><li><p><strong>同一区域之中不可以声明相同名称的变量。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> a=<span class="hljs-number">2</span>;<span class="hljs-comment">//无报错</span><br>&#125;<br>&#123;<br><span class="hljs-keyword">let</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> a=<span class="hljs-number">2</span>;<span class="hljs-comment">//Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二、const"><a href="#二、const" class="headerlink" title="二、const"></a>二、const</h3><ul><li><strong>声明常量内容</strong>，<strong>此类变量一旦声明</strong>，<strong>则不可以进行修改</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.1415</span>;<br>PI = <span class="hljs-number">3</span>;<span class="hljs-comment">//Uncaught TypeError: Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><ul><li><strong>const通过保证变量指向的内存区域的对应的数值的不变来达到这一效果的</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI=&#123;&#125;  <br>PI.num=<span class="hljs-number">3.14159</span>;<span class="hljs-comment">//不会报错  </span><br>PI=&#123;num=<span class="hljs-number">3.14159</span>&#125;;<span class="hljs-comment">//VM1187:1 Uncaught SyntaxError: Identifier &#x27;PI&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><ul><li><strong>const声明的常量必须声明时就赋值</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> PI; <span class="hljs-comment">// SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><ul><li><strong>const声明的常量跟let的作用域一样</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14159</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(PI); <span class="hljs-comment">// Uncaught ReferenceError: PI is not defined</span><br></code></pre></td></tr></table></figure><h3 id="三、super"><a href="#三、super" class="headerlink" title="三、super"></a>三、super</h3><p><strong>this关键字总是指向函数所在的当前对象，ES6又新增super关键字，指向当前对象的原型对象。两种使用方式：</strong></p><h4 id="1、当做函数使用"><a href="#1、当做函数使用" class="headerlink" title="1、当做函数使用"></a>1、当做函数使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">parent</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span>)<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">parent</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> child();<span class="hljs-comment">//打印11</span><br><br></code></pre></td></tr></table></figure><p>当做函数使用时，super()调用会生成一个空对象，作为context来调用父类的constructor，返回this对象，作为子类constructor的context继续调用构造函数。</p><h4 id="2、当做对象使用"><a href="#2、当做对象使用" class="headerlink" title="2、当做对象使用"></a>2、当做对象使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> proto = &#123;<br>  foo: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;;<br><span class="hljs-keyword">const</span> obj = &#123;<br>  foo: <span class="hljs-string">&#x27;world&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">find</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.foo;<br>  &#125;<br>&#125;;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj, proto);<br>obj.find() <span class="hljs-comment">// &quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码中，对象obj.find()方法之中，通过super.foo引用了原型对象proto的foo属性。</p><h4 id="3、注意区分super与this"><a href="#3、注意区分super与this" class="headerlink" title="3、注意区分super与this"></a>3、注意区分super与this</h4><p>super与this的区别，this关键字最终指向的是调用它的对象。下面两个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetThis</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br>GetThis();<span class="hljs-comment">//打印出window对象。</span><br></code></pre></td></tr></table></figure><p>其实最后的调用我们也可以写成window.GetThis();调用他的就是window对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> getThis=&#123; <br>user:<span class="hljs-string">&#x27;me&#x27;</span>,<br>fn:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br>getThis.fn();<span class="hljs-comment">//打印的就时getThis对象；</span><br></code></pre></td></tr></table></figure><p>this与super结合的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> proto = &#123;<br>  x: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x);<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> obj = &#123;<br>  x: <span class="hljs-string">&#x27;world&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>.foo();<br>  &#125;<br>&#125;<br><span class="hljs-built_in">Object</span>.setPrototypeOf(obj, proto);<br>obj.foo()<span class="hljs-comment">// &quot;world&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码中，super.foo指向原型对象proto的foo方法，但是绑定的this却还是当前对象obj，因此输出的就是world。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue整合element-china-area-data实现PC端省市区三级联动选择器</title>
    <link href="/2022/01/18/%E5%AE%9E%E7%8E%B0PC%E7%AB%AF%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2022/01/18/%E5%AE%9E%E7%8E%B0PC%E7%AB%AF%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Element-UI-中国省市区级联数据"><a href="#Element-UI-中国省市区级联数据" class="headerlink" title="Element UI 中国省市区级联数据"></a>Element UI 中国省市区级联数据</h2><p>[TOC]</p><a id="more"></a><h3 id="安装城市数据："><a href="#安装城市数据：" class="headerlink" title="安装城市数据："></a>安装城市数据：</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">npm</span> install element-china-area-data -S<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; provinceAndCityData, regionData, provinceAndCityDataPlus, regionDataPlus, CodeToText, TextToCode &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-china-area-data&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="服务端用法"><a href="#服务端用法" class="headerlink" title="服务端用法"></a>服务端用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; provinceAndCityData, regionData, provinceAndCityDataPlus, regionDataPlus, CodeToText, TextToCode &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;element-china-area-data/dist/app.commonjs&#x27;</span>)<br></code></pre></td></tr></table></figure><ol><li><code>provinceAndCityData</code>是省市二级联动数据（不带“全部”选项）</li><li><code>regionData</code>是省市区三级联动数据（不带“全部”选项）</li><li><code>provinceAndCityDataPlus</code>是省市区三级联动数据（带“全部”选项）</li><li><code>regionDataPlus</code>是省市区三级联动数据（带“全部”选项）</li><li>“全部”选项绑定的value是空字符串<code>&quot;&quot;</code></li><li><code>CodeToText</code>是个大对象，属性是区域码，属性值是汉字 用法例如：<code>CodeToText[&#39;110000&#39;]</code>输出<code>北京市</code></li><li><code>TextToCode</code>是个大对象，属性是汉字，属性值是区域码 用法例如：<code>TextToCode[&#39;北京市&#39;].code</code>输出<code>110000</code>,<code>TextToCode[&#39;北京市&#39;][&#39;市辖区&#39;].code</code>输出<code>110100</code>,<code>TextToCode[&#39;北京市&#39;][&#39;市辖区&#39;][&#39;朝阳区&#39;].code</code>输出<code>110105</code></li></ol><h3 id="省市二级联动（不带“全部”选项）"><a href="#省市二级联动（不带“全部”选项）" class="headerlink" title="省市二级联动（不带“全部”选项）:"></a>省市二级联动（不带“全部”选项）:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;el-cascader<br>      size&#x3D;&quot;large&quot;<br>      :options&#x3D;&quot;options&quot;<br>      v-model&#x3D;&quot;selectedOptions&quot;<br>      @change&#x3D;&quot;handleChange&quot;&gt;<br>    &lt;&#x2F;el-cascader&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>  import &#123; provinceAndCityData &#125; from &#39;element-china-area-data&#39;<br>  export default &#123;<br>    data () &#123;<br>      return &#123;<br>        options: provinceAndCityData,<br>        selectedOptions: []<br>      &#125;<br>    &#125;,<br><br>    methods: &#123;<br>        handleChange () &#123;<br>        var loc &#x3D; &quot;&quot;;<br>        for (let i &#x3D; 0; i &lt; this.selectedOptions.length; i++) &#123;<br>            loc +&#x3D; CodeToText[this.selectedOptions[i]];<br>        &#125;<br>        console.log(loc)&#x2F;&#x2F;打印区域码所对应的属性值即中文地址<br>      &#125;<br>    &#125;&#x2F;&#x2F;或者下面的写法<br>      handleChange (value) &#123;<br>        console.log(value)<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="省市二级联动（带“全部”选项）"><a href="#省市二级联动（带“全部”选项）" class="headerlink" title="省市二级联动（带“全部”选项）:"></a>省市二级联动（带“全部”选项）:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;el-cascader<br>      size&#x3D;&quot;large&quot;<br>      :options&#x3D;&quot;options&quot;<br>      v-model&#x3D;&quot;selectedOptions&quot;<br>      @change&#x3D;&quot;handleChange&quot;&gt;<br>    &lt;&#x2F;el-cascader&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>  import &#123; provinceAndCityDataPlus &#125; from &#39;element-china-area-data&#39;<br>  export default &#123;<br>    data () &#123;<br>      return &#123;<br>        options: provinceAndCityDataPlus,<br>        selectedOptions: []<br>      &#125;<br>    &#125;,<br><br>    methods: &#123;<br>      handleChange (value) &#123;<br>        console.log(value)<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="省市区三级联动（不带“全部”选项）"><a href="#省市区三级联动（不带“全部”选项）" class="headerlink" title="省市区三级联动（不带“全部”选项）"></a>省市区三级联动（不带“全部”选项）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;el-cascader<br>      size&#x3D;&quot;large&quot;<br>      :options&#x3D;&quot;options&quot;<br>      v-model&#x3D;&quot;selectedOptions&quot;<br>      @change&#x3D;&quot;handleChange&quot;&gt;<br>    &lt;&#x2F;el-cascader&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>  import &#123; regionData &#125; from &#39;element-china-area-data&#39;<br>  export default &#123;<br>    data () &#123;<br>      return &#123;<br>        options: regionData,<br>        selectedOptions: []<br>      &#125;<br>    &#125;,<br><br>    methods: &#123;<br>      handleChange (value) &#123;<br>        console.log(value)<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="省市区三级联动（带“全部”选项）"><a href="#省市区三级联动（带“全部”选项）" class="headerlink" title="省市区三级联动（带“全部”选项）"></a>省市区三级联动（带“全部”选项）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;el-cascader<br>      size&#x3D;&quot;large&quot;<br>      :options&#x3D;&quot;options&quot;<br>      v-model&#x3D;&quot;selectedOptions&quot;<br>      @change&#x3D;&quot;handleChange&quot;&gt;<br>    &lt;&#x2F;el-cascader&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br><br>&lt;script&gt;<br>  import &#123; regionDataPlus &#125; from &#39;element-china-area-data&#39;<br>  export default &#123;<br>    data () &#123;<br>      return &#123;<br>        options: regionDataPlus,<br>        selectedOptions: []<br>      &#125;<br>    &#125;,<br><br>    methods: &#123;<br>      handleChange (value) &#123;<br>        console.log(value)<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><h3 id="绑定value格式"><a href="#绑定value格式" class="headerlink" title="绑定value格式"></a>绑定value格式</h3><p>value是区域码<code>&quot;110000&quot;</code></p><h3 id="音乐网站项目中的应用"><a href="#音乐网站项目中的应用" class="headerlink" title="音乐网站项目中的应用"></a>音乐网站项目中的应用</h3><h4 id="html部分文件"><a href="#html部分文件" class="headerlink" title="html部分文件"></a>html部分文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;registerForm&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;registerForm&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;location&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地区&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-cascader</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;options&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedOptions&quot;</span>  @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleChange&quot;</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-cascader</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;centerDialogVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addSinger&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Js部分文件"><a href="#Js部分文件" class="headerlink" title="Js部分文件"></a>Js部分文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123;setSinger&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../api/index&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;mixin&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../mixins/index&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; provinceAndCityData, regionData, provinceAndCityDataPlus, regionDataPlus, CodeToText, TextToCode &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-china-area-data&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    mixins: [mixin],<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            centerDialogVisible: <span class="hljs-literal">false</span>,<br>             options: provinceAndCityData,<br>            selectedOptions: [],<br>            registerForm:&#123;      <span class="hljs-comment">//添加框</span><br>                name: <span class="hljs-string">&#x27;&#x27;</span>,<br>                sex: <span class="hljs-string">&#x27;&#x27;</span>,<br>                birth: <span class="hljs-string">&#x27;&#x27;</span>,<br>                location: <span class="hljs-literal">null</span>,<br>                introduction: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    methods:&#123;<br>        handleChange () &#123;<br>        <span class="hljs-keyword">var</span> loc = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.selectedOptions.length; i++) &#123;<br>            loc += CodeToText[<span class="hljs-built_in">this</span>.selectedOptions[i]];<br>        &#125;<br>         <span class="hljs-built_in">this</span>.registerForm.location = loc;<span class="hljs-comment">//转换为中文赋值给location</span><br>      &#125;,<br>        <span class="hljs-comment">//添加歌手</span><br>        <span class="hljs-function"><span class="hljs-title">addSinger</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">let</span> d = <span class="hljs-built_in">this</span>.registerForm.birth<br>            <span class="hljs-keyword">let</span> datetime = d.getFullYear()+<span class="hljs-string">&#x27;-&#x27;</span>+(d.getMonth()+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;-&#x27;</span>+d.getDate()<br>            <span class="hljs-keyword">let</span> params = <span class="hljs-keyword">new</span> URLSearchParams()<br>            params.append(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-built_in">this</span>.registerForm.name)<br>            params.append(<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-built_in">this</span>.registerForm.sex)<br>            params.append(<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-string">&#x27;/img/singerPic/user.png&#x27;</span>)<br>            params.append(<span class="hljs-string">&#x27;birth&#x27;</span>,datetime)<br>            params.append(<span class="hljs-string">&#x27;location&#x27;</span>,<span class="hljs-built_in">this</span>.registerForm.location)<br>            params.append(<span class="hljs-string">&#x27;introduction&#x27;</span>,<span class="hljs-built_in">this</span>.registerForm.introduction)<br>            setSinger(params)<br>          .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span>(res.code == <span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-built_in">this</span>.notify(<span class="hljs-string">&quot;添加成功&quot;</span>,<span class="hljs-string">&quot;success&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-built_in">this</span>.notify(<span class="hljs-string">&quot;添加失败&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>                &#125;<br>            &#125;)<br>            .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(err);<br>            &#125;);<br>            <span class="hljs-built_in">this</span>.centerDialogVisible = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>参考地址：<a href="https://github.com/Plortinus/element-china-area-data"></a></p>]]></content>
    
    
    <categories>
      
      <category>毕业设计</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础之数组</title>
    <link href="/2022/01/15/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
    <url>/2022/01/15/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h2><h3 id="1-1-数组的定义"><a href="#1-1-数组的定义" class="headerlink" title="1.1 数组的定义"></a>1.1 数组的定义</h3><ul><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问他们</li></ul><h2 id="2-数组声明创建"><a href="#2-数组声明创建" class="headerlink" title="2.数组声明创建"></a>2.数组声明创建</h2><ul><li><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar; <span class="hljs-comment">//首选的方法</span><br>或<br>dataType arrayRefVar[];<span class="hljs-comment">//效果相同</span><br></code></pre></td></tr></table></figure></li><li><p>Java语言使用new操作符来创建数组，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dataType[] arrayRefVar=<span class="hljs-keyword">new</span> dataType[arraySize];<br></code></pre></td></tr></table></figure></li><li><p>数组的元素是通过索引访问的，数组索引从0开始。</p></li><li><p>获取数组的长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arrays.length<br></code></pre></td></tr></table></figure></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo01</span> </span>&#123;<br>    <span class="hljs-comment">//变量的类型  变量的名字=变量的值</span><br>    <span class="hljs-comment">//数组类型</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums;<span class="hljs-comment">//1.定义</span><br>        <span class="hljs-keyword">int</span> nums2[];<br>        nums=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//这里面可以存放10个int类型的数字</span><br>        <span class="hljs-comment">//3.给数组中元素赋值</span><br>        nums[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        nums[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>        nums[<span class="hljs-number">2</span>]=<span class="hljs-number">3</span>;<br>        nums[<span class="hljs-number">3</span>]=<span class="hljs-number">4</span>;<br>        nums[<span class="hljs-number">4</span>]=<span class="hljs-number">5</span>;<br>        nums[<span class="hljs-number">5</span>]=<span class="hljs-number">6</span>;<br>        nums[<span class="hljs-number">6</span>]=<span class="hljs-number">7</span>;<br>        nums[<span class="hljs-number">7</span>]=<span class="hljs-number">8</span>;<br>        nums[<span class="hljs-number">8</span>]=<span class="hljs-number">9</span>;<br>        nums[<span class="hljs-number">9</span>]=<span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//计算所有元素的和</span><br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//获取数组长度：arrays.length</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;nums.length;i++)&#123;<br>            sum+=nums[i];<br>        &#125;<br>        System.out.println(&amp;quot;总和为:&amp;quot;+sum);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1内存分析"><a href="#2-1内存分析" class="headerlink" title="2.1内存分析"></a>2.1内存分析</h3></li><li><p>Java内存分析</p><p>Java内存</p><ul><li><p>堆</p><p>存放new的对象和数组</p><p>可以被所有的线程共享，不会存放别的对象引用</p></li><li><p>栈</p><p>存放基本变量类型(会包含这个基本类型的具体数值)</p><p>引用对象的变量(会存放这个引用在堆里面的具体地址)</p></li><li><p>方法区</p><p>可以被所有的线程共享</p><p>包含了所有的class和static变量</p><p>&lt;img src=&quot;F:\软件下载\processon on流程图\Java内存分析.png&quot; style=&quot;zoom:80%;&quot; /&gt;</p></li></ul></li></ul><h3 id="2-2三种初始化"><a href="#2-2三种初始化" class="headerlink" title="2.2三种初始化"></a>2.2三种初始化</h3><ul><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>Man[] mans=&#123;<span class="hljs-keyword">new</span> Man(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-keyword">new</span> man(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>a[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li><li><p>数组默认初始化</p><ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量相同的方式被隐式初始化。</li></ul></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//静态初始化:创建+赋值</span><br>        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br>        System.out.println(a[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">//Man [] mans=&#123;new Man(),new Man()&#125;;</span><br>        <span class="hljs-comment">//动态初始化:包含默认初始化(int初始化为0,String初始化null)</span><br>        <span class="hljs-keyword">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        b[<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>;<br>        System.out.println(b[<span class="hljs-number">0</span>]);<br>        System.out.println(b[<span class="hljs-number">8</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3数组的四个基本特点"><a href="#2-3数组的四个基本特点" class="headerlink" title="2.3数组的四个基本特点"></a>2.3数组的四个基本特点</h3></li><li><p>其长度是确定的，数组一旦被创建，它的大小就是不可以变的。</p></li><li><p>其元素必须是相同类型，不允许出现混合类型。</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</p></li><li><p>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的。</p></li></ul><h2 id="2-4数组边界"><a href="#2-4数组边界" class="headerlink" title="2.4数组边界"></a>2.4数组边界</h2><ul><li><p>下标的合法区间：[0:length-1],如果越界就会报错；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;=a.length;i++)&#123;<br>            System.out.println(a[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>java.lang.ArrayIndexOutOfBoundsException：数组下标越界异常！</p></li><li><p>小结：</p><ul><li>数组是相同数据类型(数据类型可以为任意类型)的有序集合</li><li>数组也是对象。数组元素相当于对象的成员变量</li><li>数组长度是确定的，不可变的。如果越界，则报：ArrayIndexOutOfBoundsException</li></ul></li></ul><h2 id="3-数组使用"><a href="#3-数组使用" class="headerlink" title="3.数组使用"></a>3.数组使用</h2>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arrays=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-comment">//打印全部的数组元素</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;arrays.length;i++) &#123;<br>            System.out.println(arrays[i]);<br>        &#125;<br>        System.out.println(&amp;quot;==========================================&amp;quot;);<br>        <span class="hljs-comment">//计算所有元素的和</span><br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;arrays.length;i++)&#123;<br>            sum+=arrays[i];<br>        &#125;<br>            System.out.println(&amp;quot;sum=:&amp;quot;+sum);<br>        System.out.println(&amp;quot;==========================================&amp;quot;);<br>        <span class="hljs-comment">//查找最大元素</span><br>        <span class="hljs-keyword">int</span> max=arrays[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;arrays.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(arrays[i]&amp;gt;max)&#123;<br>                max=arrays[i];<br>            &#125;<br>        &#125;<br>        System.out.println(&amp;quot;max=&amp;quot;+max);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>For-Each循环</p></li><li><p>数组作方法入参</p></li><li><p>数组作返回值</p></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zzhhangjiashun;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AarrayDemo04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arrays=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-comment">//JDK1.5 没有下标</span><br>        <span class="hljs-comment">//For-Each循环</span><br><span class="hljs-comment">//        for (int array : arrays) &#123;</span><br><span class="hljs-comment">//            System.out.println(array);</span><br><span class="hljs-comment">//        &#125;</span><br>        printArray(arrays);<br>        <span class="hljs-keyword">int</span>[] reverse=reverse(arrays);<br>        printArray(reverse);<br>    &#125;<br>    <span class="hljs-comment">//打印数组元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arrays)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;arrays.length;i++)&#123;<br>            System.out.print(arrays[i]+&amp;quot; &amp;quot;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//反转数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] reverse(<span class="hljs-keyword">int</span>[] arrays)&#123;<br>        <span class="hljs-keyword">int</span>[] result=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arrays.length];<br>        <span class="hljs-comment">//反转的操作</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=result.length-<span class="hljs-number">1</span>;i&amp;lt;arrays.length;i++,j--)&#123;<br>            result[j]=arrays[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h2></li><li><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每个元素都是一个一维数组</p></li><li><p>二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a[][]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo05</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>          <span class="hljs-keyword">int</span>[][] array=&#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125; &#125;;<br>          System.out.println(array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>          System.out.println(array[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br>          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;array.length;i++)&#123;<br>              <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&amp;lt;array[i].length;j++)&#123;<br>                  System.out.println(array[i][j]);<br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="5-Arrays类"><a href="#5-Arrays类" class="headerlink" title="5.Arrays类"></a>5.Arrays类</h2></li><li><p>数组的工具类java.util.Arrays</p></li><li><p>由于数组对象本身并没有什么方法可以供我们调用，API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</p></li><li><p>查看JDK帮助文档</p></li><li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而不用使用对象来调用</p></li><li><p>具有以下常用功能：</p><ul><li><p>给数组赋值：通过fill方法；</p></li><li><p>对数组排序：通过sort方法，按升序；</p></li><li><p>比较数组：通过equals方法比较数组中的元素值是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">435</span>,<span class="hljs-number">241</span>,<span class="hljs-number">78</span>,<span class="hljs-number">22</span>,<span class="hljs-number">12421</span>,<span class="hljs-number">66</span>&#125;;<br>        System.out.println(a);<span class="hljs-comment">//[I@1b6d3586</span><br>        <span class="hljs-comment">//打印数组元素</span><br>        System.out.println(Arrays.toString(a));<br>        printArray(a);<br>        System.out.println();<br>        System.out.println(&amp;quot;====================================================&amp;quot;);<br>        Arrays.sort(a);<span class="hljs-comment">//数组进行排序</span><br>        System.out.println(Arrays.toString(a));<br>        Arrays.fill(a,<span class="hljs-number">0</span>);<span class="hljs-comment">//数组填充</span><br>        System.out.println(Arrays.toString(a));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;a.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(&amp;quot;[&amp;quot;);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i==a.length-<span class="hljs-number">1</span>)&#123;<br>                System.out.print(a[i]+&amp;quot;]&amp;quot;);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.print(a[i]+&amp;quot;, &amp;quot;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-冒泡排序"><a href="#6-冒泡排序" class="headerlink" title="6.冒泡排序"></a>6.冒泡排序</h2></li><li><p>冒泡排序是最为出名的排序算法之一，总共有八大排序</p></li><li><p>冒泡代码两层循环，外层冒泡轮数，里层依次比较；</p></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array07</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">35</span>,<span class="hljs-number">5558</span>,<span class="hljs-number">213</span>,<span class="hljs-number">32</span>,<span class="hljs-number">436</span>,<span class="hljs-number">57876</span>,<span class="hljs-number">23</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] sorted=sort(a);<span class="hljs-comment">//调用完冒泡排序后，返回一个排序后的数组</span><br>        System.out.println(Arrays.toString(a));<br><br><br>    &#125;<br><br>        <span class="hljs-comment">//冒泡排序</span><br>        <span class="hljs-comment">//1.比较数组中，两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置</span><br>        <span class="hljs-comment">//2.每一次比较，都会产生一个最大，或者最小的数字</span><br>        <span class="hljs-comment">//3.下一轮可以少一次排序</span><br>        <span class="hljs-comment">//4.以此循环，直到结束</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] array)&#123;<br>            <span class="hljs-comment">//外层循环，判断我们要走多少次</span><br>            <span class="hljs-keyword">boolean</span> flag=<span class="hljs-keyword">false</span>;<span class="hljs-comment">//通过flag标识减少没有意义的比较</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;array.length-<span class="hljs-number">1</span>;i++)&#123;<br>                <span class="hljs-comment">//n内层循环，比较判断两个数，如果第一个数比第二个数大，则交换位置</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&amp;lt;array.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                    <span class="hljs-keyword">if</span> (array[j]&amp;gt;array[j+<span class="hljs-number">1</span>])&#123;<br>                        <span class="hljs-keyword">int</span> temp;<br>                        temp=array[j];<br>                        array[j]=array[j+<span class="hljs-number">1</span>];<br>                        array[j+<span class="hljs-number">1</span>]=temp;<br>                        flag=<span class="hljs-keyword">true</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (flag==<span class="hljs-keyword">false</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> array;<br>        &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-稀疏数组"><a href="#7-稀疏数组" class="headerlink" title="7.稀疏数组"></a>7.稀疏数组</h2></li><li><p>一种数据结构</p></li><li><p>需求：编写五子棋游戏中，有存盘退出和续上盘的功能；因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。</p><h3 id="7-1稀疏数组介绍"><a href="#7-1稀疏数组介绍" class="headerlink" title="7.1稀疏数组介绍"></a>7.1稀疏数组介绍</h3></li><li><p>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</p></li><li><p>稀疏数组的处理方式是：</p><ul><li><p>记录数组一共有几行几列，有多少个不同的值</p></li><li><p>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序规模</p></li></ul></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayDemo08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.创建一个二维数组11*11 0：没有棋子，1：黑棋，2：白棋；</span><br>        <span class="hljs-keyword">int</span>[][] array1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        array1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br>        array1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//输出原始的数组；</span><br>        System.out.println(&amp;quot;输出原始的数组&amp;quot;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] ints : array1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> anInt : ints) &#123;<br>                System.out.print(anInt+&amp;quot;\t&amp;quot;);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        System.out.println(&amp;quot;==================================&amp;quot;);<br>        <span class="hljs-comment">//转换为稀疏数组保存</span><br>        <span class="hljs-comment">//获取有效值的个数；</span><br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;<span class="hljs-number">11</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&amp;lt;<span class="hljs-number">11</span>;j++)<br>                <span class="hljs-keyword">if</span>(array1[i][j]!=<span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>        &#125;<br>        System.out.println(&amp;quot;有效值的个数：&amp;quot;+sum);<br>        <span class="hljs-comment">//2.创建一个稀疏数组的数组</span><br>        <span class="hljs-keyword">int</span>[][] array2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        array2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<br>        array2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">11</span>;<br>        array2[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=sum;<br>        <span class="hljs-comment">//遍历二维数组，将非零的值存放到稀疏数组中</span><br>        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;array1.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&amp;lt;array1[i].length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(array1[i][j]!=<span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    array2[count][<span class="hljs-number">0</span>]=i;<br>                    array2[count][<span class="hljs-number">1</span>]=j;<br>                    array2[count][<span class="hljs-number">2</span>]=array1[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//输出稀疏数组</span><br>        System.out.println(&amp;quot;稀疏数组&amp;quot;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&amp;lt;array2.length;i++)&#123;<br>            System.out.println(array2[i][<span class="hljs-number">0</span>]+&amp;quot;\t&amp;quot;+<br>                    array2[i][<span class="hljs-number">1</span>]+&amp;quot;\t&amp;quot;+array2[i][<span class="hljs-number">2</span>]+&amp;quot;\t&amp;quot;);<br>        &#125;<br>        System.out.println(&amp;quot;===============================================&amp;quot;);<br>        System.out.println(&amp;quot;还原：&amp;quot;);<br>        <span class="hljs-comment">//1.读取稀疏数组</span><br>        <span class="hljs-keyword">int</span>[][] array3=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][array2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-comment">//2.给其中的元素还原它的值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&amp;lt;array2.length;i++)&#123;<br>            array3[array2[i][<span class="hljs-number">0</span>]][array2[i][<span class="hljs-number">1</span>]]=array2[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-comment">//3.打印</span><br>        System.out.println(&amp;quot;输出还原的数组&amp;quot;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] ints : array3) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> anInt : ints) &#123;<br>                System.out.print(anInt+&amp;quot;\t&amp;quot;);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-for和v-on的补充</title>
    <link href="/2022/01/15/v-for%E5%92%8Cv-on%E7%9A%84%E8%A1%A5%E5%85%85/"/>
    <url>/2022/01/15/v-for%E5%92%8Cv-on%E7%9A%84%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ol><li><p><strong>根据数据生成列表结构；</strong></p></li><li><p><strong>数组经常和v-for结合使用；</strong></p></li><li><p><strong>语法是v-for=“(item,index) in 数据”</strong></p></li><li><p><strong>遍历对象格式：（value,key）或（value,key，index）</strong></p></li><li><p><strong>item和index可以结合其他指令一起使用；</strong></p></li><li><p><strong>数组长度的更新会同步到页面上，是响应式的。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-for指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reduce&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in arr&quot;</span>&gt;</span><br>                &#123;&#123;index+1&#125;&#125;我要在&#123;&#123;item&#125;&#125;买房<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in foods&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.name&quot;</span>&gt;</span><br>            &#123;&#123;item.name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app  = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class="javascript">                arr:[<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>,<span class="hljs-string">&quot;杭州&quot;</span>,<span class="hljs-string">&quot;郑州&quot;</span>],</span><br><span class="javascript">                foods:[&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;西红柿鸡蛋&quot;</span>&#125;,</span><br><span class="javascript">                        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;西兰花&quot;</span>&#125;]</span><br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.foods.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;西红柿&quot;</span>&#125;);</span><br>                &#125;,<br><span class="javascript">                reduce:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.foods.shift();</span><br>                &#125;<br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="v-on补充"><a href="#v-on补充" class="headerlink" title="v-on补充"></a>v-on补充</h2><ol><li><strong>事件绑定的方法写成函数调用的形式，可以传入自定义参数。</strong></li><li><strong>定义方法时需要定义形参来接收传入的实参。</strong></li><li><strong>事件的后面跟上.修饰符可以对事件进行限制</strong></li><li><strong>.enter可以限制触发的按键为回车</strong></li><li><strong>如果方法不需要额外的参数，那么方法后的（）可以不添加。但是注意：如果方法本身中有一个参数，那么默认将原生事件event参数传递进去。</strong></li><li><strong>如果需要同时传入某个参数，同时需要浏览器参数的event对象时，可以通过$event传入事件。</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-on<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 方法处理器 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button v-on:click=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态事件 (2.6.0+) --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button v-on:[event]=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 内联语句 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button v-on:click=&quot;doThat(&#x27;hello&#x27;, $event)&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button @click=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 动态事件缩写 (2.6.0+) --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button @[event]=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 停止冒泡 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button @click.stop=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止默认行为 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;form @submit.prevent&gt;&lt;/form&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!--  串联修饰符 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button @click.stop.prevent=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 键修饰符，键别名 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;input @keyup.enter=&quot;onEnter&quot;&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 键修饰符，键代码 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;input @keyup.13=&quot;onEnter&quot;&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 点击回调只会触发一次 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button v-on:click.once=&quot;doThis&quot;&gt;&lt;/button&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doit(666,&#x27;你好&#x27;)&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><br>            &#125;,<br><span class="javascript">            <span class="hljs-comment">// 传参与事件的传值相对应</span></span><br>            methods:&#123;<br><span class="javascript">                doit:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p1,p2</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;老铁！&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(p1,p2)</span><br>                &#125;,<br><span class="javascript">                hello:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;你好！&quot;</span>)</span><br>                &#125;<br>            &#125;<br>        &#125;)<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础之浅谈方法</title>
    <link href="/2022/01/14/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%85%E8%B0%88%E6%96%B9%E6%B3%95/"/>
    <url>/2022/01/14/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%85%E8%B0%88%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h2><p>Java方法是语句的集合，它们在一起执行一个功能。</p><ul><li>方法是解决一类问题的步骤的有序组合。</li><li>方法包含于类或对象中。</li><li>方法在程序中被创建，在其他地方被引用。</li></ul><p>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成一个功能，这样利于我们后期的拓展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javase.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-comment">//main方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        System.out.println(sum);<span class="hljs-comment">//3</span><br>        <span class="hljs-comment">//事实上，Java内置的Math.addExact方法就是加法了，不需要自己写加法的方法。</span><br>        <span class="hljs-keyword">int</span> i = Math.addExact(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        System.out.println(i);<span class="hljs-comment">//5</span><br>    &#125;<br>    <span class="hljs-comment">//定义一个实现加法功能的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>Java的方法类似于其它语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法：</p><p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p><ul><li><p>修饰符：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</p></li><li><p>返回值类型：方法可能会返回值。 <code>returnValueType</code>是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，<code>returnValueType</code>是关键字<code>void</code>。</p></li><li><p>方法名：是方法的实际名称。方法名和参数表共同构成方法签名。</p></li><li><p>参数类型：参数像是一个占位符。当方法被调用时，传递值给参数，这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p><ul><li>形式参数：在方法被调用时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li><p>方法体：方法体包含具体的语句，定义该方法的功能。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名)&#123;<br>    ...<br>    方法体<br>    ...<br>    <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>调用方法：对象名.方法名(实参列表)</p><p>Java支持两种调用方式的方式，根据方法是否返回值来选择。</p><p>当方法返回一个值的时候，方法调用通常被当作一个值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> larger = max(<span class="hljs-number">30</span>, <span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><p>如果方法返回值是<code>void</code>，方法调用一定是一条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(&amp;quot;Hello,World!&amp;quot;);<br></code></pre></td></tr></table></figure><p>拓展了解：<a href="https://blog.csdn.net/qq_40574571/article/details/90765349">值传递 和 引用传递</a></p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p><p>方法的重载的规则：</p><ul><li>方法名称必须相同。</li><li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul><p>实现理论：</p><ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javase.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> max1 = max(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">double</span> max2 = max(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>);<br>        System.out.println(max1);<br>        System.out.println(max2);<br>    &#125;<br><br>    <span class="hljs-comment">//比较大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1,<span class="hljs-keyword">int</span> num2)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> result;<br>        <span class="hljs-keyword">if</span> (num1==num2)&#123;<br>            System.out.println(&amp;quot;两数相等&amp;quot;);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//终止方法</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1&amp;gt;num2)&#123;<br>            result = num1;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//重载max方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1,<span class="hljs-keyword">double</span> num2)</span></span>&#123;<br>        <span class="hljs-keyword">double</span> result;<br>        <span class="hljs-keyword">if</span> (num1==num2)&#123;<br>            System.out.println(&amp;quot;两数相等&amp;quot;);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//终止方法</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num1&amp;gt;num2)&#123;<br>            result = num1;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            result = num2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>JDK1.5开始，Java支持传递同类型的可变参数给一个方法。</p><p>在方法声明中，在指定参数类型后加一个省略号（…）。</p><p>在一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javase.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo03 demo03 = <span class="hljs-keyword">new</span> Demo03();<br>        demo03.test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br><br>        printMax(<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5.20</span>,<span class="hljs-number">13.14</span>);<span class="hljs-comment">//13.14</span><br>        printMax(<span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);<span class="hljs-comment">//3.0</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... i)</span></span>&#123;<br>        System.out.println(i[<span class="hljs-number">0</span>]);<br>        System.out.println(i[<span class="hljs-number">1</span>]);<br>        System.out.println(i[<span class="hljs-number">2</span>]);<br>        System.out.println(i[<span class="hljs-number">3</span>]);<br>        System.out.println(i[<span class="hljs-number">4</span>]);<br>        System.out.println(i[<span class="hljs-number">5</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">//求数组中的最大值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printMax</span><span class="hljs-params">(<span class="hljs-keyword">double</span>... numbers)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (numbers.length == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(&amp;quot;No argument passed&amp;quot;);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">double</span> result = numbers[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &amp;lt; numbers.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (numbers[i] &amp;gt; result)&#123;<br>                result = numbers[i];<br>            &#125;<br>        &#125;<br>        System.out.println(&amp;quot;The max value is&amp;quot; + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>A方法调用B方法很容易理解</p><p>递归就是：A方法调用A方法，就是自己调用自己！</p><p>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述岀解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</p><p>递归结构包括两个部分：</p><ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候要调用自身方法。</li></ul><p>不建议用递归，虽然方便了程序员但辛苦了计算机（可能会栈溢出）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.javase.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(f(<span class="hljs-number">5</span>));<span class="hljs-comment">//120</span><br>    &#125;<br><br>    <span class="hljs-comment">//递归求阶乘 n!=1*2*3*...*n</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础之流程控制</title>
    <link href="/2022/01/13/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/01/13/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Java的流程控制"><a href="#Java的流程控制" class="headerlink" title="Java的流程控制"></a>Java的流程控制</h2><p><strong>顺序结构,选择结构,循环结构。</strong></p><p><strong>if选择结构，switch case选择结构；while循环，do  while循环，for循环</strong></p><a id="more"></a><h4 id="1-1-顺序结构"><a href="#1-1-顺序结构" class="headerlink" title="1.1 顺序结构"></a>1.1 顺序结构</h4><p><strong>在程序运行中，最简单的便是顺序结构，程序运行都是从上到下都是一步一步执行的，这更符合顺序两个字。</strong></p><h4 id="1-2-选择结构"><a href="#1-2-选择结构" class="headerlink" title="1.2 选择结构"></a>1.2 选择结构</h4><p> 根据条件选择要执行的程序块</p><ul><li><strong>if单选择结构：</strong>判断一件事情是否可行，再去执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本结构：</span><br><span class="hljs-comment">//    if(布尔表达式)&#123;要执行的代码&#125;</span><br><br><br>Scanner sc=<span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//实例化一个输入</span><br>String str=sc.nextLine();<span class="hljs-comment">//从键盘接收键入的数据并赋给str</span><br><span class="hljs-keyword">if</span>(str.equals(&amp;quot;我爱java&amp;quot;))&#123;<span class="hljs-comment">//比较键入的数据是否和equals中的字符串是否相等</span><br>    System.out.println(&amp;quot;比较成功，您输入的是:&amp;quot;+str);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>if双选择结构：</strong>判断事情正确执行某段代码，不正确则执行另外一段代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner sc=<span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//实例化一个输入</span><br>String str=sc.nextLine();<span class="hljs-comment">//从键盘接收键入的数据并赋给str</span><br><span class="hljs-keyword">if</span>(str.equals(&amp;quot;我爱java&amp;quot;))&#123;<span class="hljs-comment">//比较键入的数据是否和equals中的字符串是否相等</span><br>    System.out.println(&amp;quot;比较成功，您输入的是:&amp;quot;+str);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(&amp;quot;输入的数据不正确&amp;quot;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>if多选择结构：</strong>多个条件，分别判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner sc=<span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//实例化一个输入</span><br><span class="hljs-keyword">int</span> grade=sc.nextInt();<span class="hljs-comment">//从键盘接收键入的数据并赋给grade</span><br><span class="hljs-keyword">if</span>(grade&amp;gt;<span class="hljs-number">80</span>)&#123;<br>    System.out.println(&amp;quot;成绩优秀&amp;quot;);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grade&amp;gt;<span class="hljs-number">70</span>&amp;amp;&amp;amp;grade&amp;lt;<span class="hljs-number">80</span>)&#123;<br>    System.out.println(&amp;quot;成绩良好&amp;quot;);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grade&amp;gt;<span class="hljs-number">60</span>&amp;amp;&amp;amp;grade&amp;lt;<span class="hljs-number">70</span>)&#123;<br>    System.out.println(&amp;quot;成绩一般&amp;quot;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(&amp;quot;成绩不及格&amp;quot;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>if嵌套：</strong>可以实现多个条件都成立时才执行语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner sc=<span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//实例化一个输入</span><br>System.out.println(&amp;quot;输入名字：&amp;quot;);<br>String name=sc.nextLine();<br>System.out.println(&amp;quot;输入成绩：&amp;quot;);<br><span class="hljs-keyword">int</span> grade=sc.nextInt();<span class="hljs-comment">//从键盘接收键入的数据并赋给grade</span><br><span class="hljs-keyword">if</span>(name.euqals(&amp;quot;小明&amp;quot;))&#123;<br>    <span class="hljs-keyword">if</span>(grade&amp;gt;<span class="hljs-number">60</span>)&#123;<br>    System.out.println(name+&amp;quot;的成绩是：&amp;quot;+grade);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**上面的if嵌套意思是输入的名字是小明，才会执行第二个if，如果成绩大于60，会输出 小明的成绩 **</p><ul><li>**switch case选择结构:**也是多选择结构的另外一种实现方式，判断一个变量与某一值是否相等，每个值称为一个分支。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner sc=<span class="hljs-keyword">new</span> Scanner(System.in);<span class="hljs-comment">//实例化一个输入</span><br>System.out.println(&amp;quot;输入成绩等级：&amp;quot;);<br>String grade=sc.nextLine();<br><span class="hljs-keyword">switch</span>(grade)&#123;<br>    case &amp;#39;A&amp;#39;:<br>        System.out.println(&amp;quot;优秀&amp;quot;);<br>        <span class="hljs-keyword">break</span>;<span class="hljs-comment">//注意每条case分支都要加break，否则会出现case穿透，会从开始一直执行到下一个break出现或者执行到default</span><br>    case &amp;#39;B&amp;#39;:<br>        System.out.println(&amp;quot;良好&amp;quot;);<br>        <span class="hljs-keyword">break</span>;<br>    case &amp;#39;C&amp;#39;:<br>        System.out.println(&amp;quot;一般&amp;quot;);<br>        <span class="hljs-keyword">break</span>;<br>    case &amp;#39;D&amp;#39;:<br>        System.out.println(&amp;quot;凑合&amp;quot;);<br>        <span class="hljs-keyword">break</span>;<br>    case &amp;#39;E&amp;#39;:<br>        System.out.println(&amp;quot;不太行&amp;quot;);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(&amp;quot;你输入的东西是啥？？？&amp;quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在switch语句中最值得注意的地方：case穿透问题，即每个分支最后都要有break语句，有时也可根据需求，不加break，让穿透执行下去</strong></p><h4 id="1-3-循环结构"><a href="#1-3-循环结构" class="headerlink" title="1.3 循环结构"></a>1.3 循环结构</h4><ul><li><strong>while循环：</strong>是最基本的循环语句，先判断再执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本结构为</span><br><span class="hljs-comment">//while(布尔表达式)&#123;要循环的语句&#125;</span><br><span class="hljs-comment">//下面程序是输出0-100</span><br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&amp;lt;=<span class="hljs-number">100</span>)&#123;<span class="hljs-comment">//只要布尔表达式为True，程序便会一直执行下去</span><br>    System.out.println(i);<br>    i++<span class="hljs-comment">//执行完这句之后，继续回到布尔表达式处判断，判断成功循环继续，判断失败循环结束</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>do  while循环：</strong>与while循环最大的区别就是程序会至少执行一次，先执行再判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*基本结构</span><br><span class="hljs-comment">do&#123;</span><br><span class="hljs-comment">代码语句块</span><br><span class="hljs-comment">  &#125;while(布尔表达式);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//下面程序是计算1-100的总和</span><br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span>&#123;<br>    sum=sum+i;<br>    System.out.println(&amp;quot;sum:&amp;quot;+sum);<br>    i++;<br>&#125;<span class="hljs-keyword">while</span>(i&amp;lt;=<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><ul><li>**for循环:**结构  for(初始化;布尔表达式;更新){循环体}</li></ul><p>&gt; 执行流程：1. 第一次进入for循环，判断布尔表达式是否成立，若成立则执行循环<br>&gt;<br>&gt;                    2.执行一次循环体之后，更新命令执行<strong>主要是对初始化值的变更</strong><br>&gt;<br>&gt;                    3.再判断表达式是否成立</p><p>下面举几个关于for循环的简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.请输出1-100,并且每行输出三个</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&amp;lt;=<span class="hljs-number">100</span>;i++)&#123;<span class="hljs-comment">//每次判断成功执行循环体后，会执行i++，然后再执行判断</span><br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)&#123;<br>        System.out.print(i+&amp;quot;\n&amp;quot;);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        System.out.print(i+&amp;quot;\t&amp;quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.打印0-100以内奇数、偶数的和</span><br><span class="hljs-keyword">int</span> oddSum=<span class="hljs-number">0</span>;<span class="hljs-comment">//奇数和初始化</span><br><span class="hljs-keyword">int</span> evenSum=<span class="hljs-number">0</span>;<span class="hljs-comment">//偶数和初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &amp;lt;=<span class="hljs-number">100</span>; i++) &#123;<span class="hljs-comment">//每次判断成功执行循环体后，会执行i++，然后再执行判断</span><br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        evenSum+=i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        oddSum+=i;<br>    &#125;<br>&#125;<br>System.out.println(&amp;quot;奇数的和为:&amp;quot;+oddSum+&amp;quot;\n偶数的和为:&amp;quot;+evenSum);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.打印1-1000能被5整除的数，并且每行输出三个</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &amp;lt;= <span class="hljs-number">1000</span>; i++) &#123;<span class="hljs-comment">//每次判断成功执行循环体后，会执行i++，然后再执行判断</span><br>    <span class="hljs-keyword">if</span> (i%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;<br>        System.out.print(i+&amp;quot;\t&amp;quot;);<br>        <span class="hljs-keyword">if</span> (i%(<span class="hljs-number">3</span>*<span class="hljs-number">5</span>)==<span class="hljs-number">0</span>)&#123;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//4.打印99乘法表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &amp;lt;= <span class="hljs-number">9</span>; i++) &#123;<span class="hljs-comment">//每次判断成功执行循环体后，会执行i++，然后再执行判断</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &amp;lt;= i; j++) &#123; <span class="hljs-comment">//j和i比较，来控制每行输出个数不超过i个，可以得出乘法表的格式</span><br>        System.out.print(j+&amp;quot;*&amp;quot;+i+&amp;quot;=&amp;quot;+i*j+&amp;quot;\t&amp;quot;);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//5.打印一个三角形</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&amp;lt;=<span class="hljs-number">7</span>; i++) &#123;<span class="hljs-comment">//控制三角形的大小</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">7</span>; j&amp;gt;=i; j--) &#123;<span class="hljs-comment">//控制每行应该输出的空格数</span><br>        System.out.print(&amp;quot; &amp;quot;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">1</span>; z &amp;lt;=i ; z++) &#123;<span class="hljs-comment">//控制三角形的每行左半生成</span><br>        System.out.print(&amp;quot;*&amp;quot;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> f =<span class="hljs-number">1</span>; f &amp;lt; i; f++) &#123;<span class="hljs-comment">//控制三角形每行的右半生成</span><br>        System.out.print(&amp;quot;*&amp;quot;);<br>    &#125;<br>    System.out.println();<span class="hljs-comment">//换行</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>增强的for循环，常用在遍历集合或者数组，可以直接定义一个类型的变量，用来遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//6.增强for循环</span><br><span class="hljs-keyword">int</span>[] num=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : num) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>break</strong>   在任何循环语句的主体部分，都可以用break语句，用于强行结束循环，不再执行下面的语句！</p></li><li><p><strong>continue</strong>  用在任何循环语句的主体部分，一般用于结束本次循环，跳过下面的语句，开启下一次的循环。</p></li><li><p><strong>goto关键字</strong>   在java中是没有这个关键字的，但是有类似用法，就是带标签的continue和break</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-bind和小练习</title>
    <link href="/2022/01/13/v-bind%E5%92%8C%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/01/13/v-bind%E5%92%8C%E5%B0%8F%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>v-bind，为元素绑定属性；完整写法是v-bind:属性名=“”</p><p> 简写 :属性名=“”</p><p> 需要动态的增删class建议使用对象的方式</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>v-bind<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.active</span>&#123;</span><br><br>            border: 1px solid red;<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;ImgSrc&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;Imgtitle&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active:isclass&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;Changeclass&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 三元表达式（isclass是true就等于active，是false就等于空字符串）和对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;ImgSrc&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;Imgtitle+&#x27;!!!!&#x27;&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;isclass?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;Changeclass&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- v-bind:属性值=&quot;&quot;或者:属性值=&quot;&quot; --&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变图片&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;Changeimg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class="javascript">                ImgSrc:<span class="hljs-string">&quot;../img/1.jpg&quot;</span>,</span><br><span class="javascript">                Imgtitle:<span class="hljs-string">&quot;陈建&quot;</span>,</span><br><span class="javascript">                isclass:<span class="hljs-literal">false</span></span><br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                Changeclass:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.isclass=!<span class="hljs-built_in">this</span>.isclass</span><br>                &#125;,<br><span class="javascript">                Changeimg:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>                  <br><span class="javascript">                    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;</span><br>                       <br><span class="javascript">                        <span class="hljs-built_in">this</span>.ImgSrc=<span class="hljs-string">&quot;../img/&quot;</span>+i+<span class="hljs-string">&quot;.jpg&quot;</span>;</span><br>                        <br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="图片切换小练习"><a href="#图片切换小练习" class="headerlink" title="图片切换小练习"></a>图片切换小练习</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图片切换<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        body&#123;<br>            text-align: center;<br>        &#125;<br><span class="css">        <span class="hljs-selector-id">#app</span>&#123;</span><br>          margin: 0 auto;<br>            <br><span class="css">            <span class="hljs-comment">/* background-color: red; */</span></span><br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.left</span>&#123;</span><br>            position: absolute;<br>            left: 200px;<br>            top: 300px;<br><br>        &#125;<br><span class="css">        <span class="hljs-selector-class">.right</span>&#123;</span><br>            position: absolute;<br>            right: 200px;<br>            top: 300px;<br><br>        &#125;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;ImgArr[index]&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;index!=0&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reduceImg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/left.png&quot;</span>  &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>  <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;index&lt;ImgArr.length-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;AddImg&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/right.png&quot;</span>  &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class="javascript">                ImgArr:[<span class="hljs-string">&quot;../img/1.jpg&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;../img/2.jpg&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;../img/3.jpg&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;../img/4.jpg&quot;</span>,],</span><br>                index:2<br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                AddImg:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>                <br><span class="javascript">                    <span class="hljs-built_in">this</span>.index++;</span><br>               <br>                &#125;,<br><span class="javascript">                reduceImg:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.index--;</span><br>                &#125;<br><br>                &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="计时器小练习"><a href="#计时器小练习" class="headerlink" title="计时器小练习"></a>计时器小练习</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reduce&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;+&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br>                num:0<br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.num&lt;<span class="hljs-number">10</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.num++;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&quot;别点啦！最大啦&quot;</span>)</span><br>                    &#125;<br>                &#125;,<br><span class="javascript">                reduce:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.num&gt;<span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.num--;</span><br><span class="javascript">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                            alert(<span class="hljs-string">&quot;别点啦！最小啦&quot;</span>)</span><br>                        &#125;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量，常量和作用域</title>
    <link href="/2022/01/12/%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2022/01/12/%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="变量，常量和作用域"><a href="#变量，常量和作用域" class="headerlink" title="变量，常量和作用域"></a>变量，常量和作用域</h1><p>变量，常量和作用域；自增自减运算符、初识Math类；短路运算；三元运算符；字符串连接符</p><a id="more"></a><p><strong><font color="blue">Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</font></strong></p><p>变量作用域：</p><ul><li><p><strong><font color="red">类变量：跟实例变量一样定义在方法外，但要加上static关键字。在类中调用就无需通过对象名(或者类名.对象名)来调用，可以直接变量名调用。（定义方法时也可以加上static关键字，则在类中调用时直接通过方法名(或者类名.方法名)调用无需创建对象）<br>类变量是从属于类的，而且会随着该类一起出现一起消失！</font></strong></p></li><li><p>实例变量：定义在类里面，方法外面，从属于对象。使用时要创建类的一个对象，<br>然后对象名.变量名调用实例变量。</p></li><li><p>&lt;注意点：如果不自行初始化，整型变量默认值为0，浮点型默认值为0.0，布尔类型默认值为false<br>除了基本类型，其余的默认值都是null&gt;</p></li><li><p>局部变量：定义在方法中，作用域也只能在定义的方法中间有效果，必须声明和定义初始化值。</p></li><li><p>常量：初始化后不能再改变值，不会变动的值。常量名一般使用大写字符。所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</p></li><li><p>定义：   final 常量名 = 值;</p></li><li><p><strong><font color="red">&lt;在定义变量时，在变量类型前面的都是修饰符，如static、final、public等等，且修饰符不存在先后顺序,<br>eg: static final double PI = 3.14; 和 final static double PI  = 3.14;俩种书写方式都是一样的效果！&gt;</font></strong></p></li></ul><h2 id="自增自减运算符、初识Math类："><a href="#自增自减运算符、初识Math类：" class="headerlink" title="自增自减运算符、初识Math类："></a>自增自减运算符、初识Math类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">int</span> b = a++;<span class="hljs-comment">//加号在后面，既先把a赋值给b，a再自增+1-----b为3</span><br><span class="hljs-keyword">int</span> c = ++a;<span class="hljs-comment">//加号在前面，既a先自增+1，再把a赋值给c------c为5</span><br></code></pre></td></tr></table></figure><h3 id="幂运算：-在java中幂运算可以借用Math数学工具类"><a href="#幂运算：-在java中幂运算可以借用Math数学工具类" class="headerlink" title="幂运算： 在java中幂运算可以借用Math数学工具类"></a>幂运算： 在java中幂运算可以借用Math数学工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">eg：<br><span class="hljs-keyword">double</span> pow = Math.pow(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//后者2为次方数</span><br>System.out.println(pow);<span class="hljs-comment">//输出结果为9</span><br></code></pre></td></tr></table></figure><h3 id="短路运算-amp-amp-运算中，a-amp-amp-b若前者为假后者b就不会被程序执行-运算同理"><a href="#短路运算-amp-amp-运算中，a-amp-amp-b若前者为假后者b就不会被程序执行-运算同理" class="headerlink" title="短路运算:&amp;&amp;运算中，a&amp;&amp;b若前者为假后者b就不会被程序执行,||运算同理."></a>短路运算:&amp;&amp;运算中，a&amp;&amp;b若前者为假后者b就不会被程序执行,||运算同理.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> c = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">boolean</span>  d = (c&lt;<span class="hljs-number">4</span>)&amp;&amp;(c++&lt;<span class="hljs-number">4</span>);<br>System.out.println(d);<span class="hljs-comment">//输出d为false</span><br>System.out.println(c);<span class="hljs-comment">//输出c为5，既后者的（c++&lt;4）没有被执行</span><br></code></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>x ? y : z  —— 既 x == true ，则结果为y，否则结果为z</p><h3 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">eg：<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<span class="hljs-comment">//快捷键：Ctrl + D : 复制当前行到下一行</span><br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//字符串连接符 +</span><br>        System.out.println(a+b+<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//当&quot;&quot;（虽然没有任何东西但它是String类型的）添加在a+b后面则a+b依旧进行运算，得30</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>+a+b);<span class="hljs-comment">//在a+b左侧加上了&quot;&quot;,虽然没有任何东西但它是String类型的，然后就会把a+b操作数转化成String类型然后拼接起来，得1020</span><br>        System.out.println(a+b+<span class="hljs-string">&quot;&quot;</span>+a);<span class="hljs-comment">//同上结合理解，既前者a+b照常运算得30而后者a转化成String拼接上去，最终得3010</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数据类型</title>
    <link href="/2022/01/12/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/01/12/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><a id="more"></a><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><strong>1、整型</strong></p><p>byte（-2的7次方到2的7次方-1） 、short（-2的15次方到2的15次方-1） 、int（-2的31次方到2的31次方-1） 、long（-2的63次方到2的63次方-1） </p><p><strong>2、浮点型</strong></p><p>float（单精度浮点型） 、 double（双精度浮点型）</p><p><strong>3、字符型</strong></p><p>char</p><p><strong>4、布尔型</strong></p><p>boolean（true 、false）</p><p>![](E:\cjy1998.github.io\source\images\数据类型2 (1).png)</p><p><img src="/2022/01/12/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/cjy1998.github.io/source\images\字节.png"></p><h2 id="基本数据类型拓展"><a href="#基本数据类型拓展" class="headerlink" title="基本数据类型拓展"></a>基本数据类型拓展</h2><h3 id="整数拓展"><a href="#整数拓展" class="headerlink" title="整数拓展"></a>整数拓展</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//整数拓展：  进制   二进制（0b开头）  十进制  八进制（0）  十六进制（0x）</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> i2 = <span class="hljs-number">010</span>;<span class="hljs-comment">//八进制（0）</span><br>        <span class="hljs-keyword">int</span> i3 = <span class="hljs-number">0x10</span>;<span class="hljs-comment">//十六进制（0x）    0~9 A~F 16</span><br>        <span class="hljs-keyword">int</span> i4 = <span class="hljs-number">0x11</span>;<br>        System.out.println(i); <span class="hljs-comment">//输出10</span><br>        System.out.println(i2);<span class="hljs-comment">//输出8</span><br>        System.out.println(i3);<span class="hljs-comment">//输出16</span><br>        System.out.println(i4);<span class="hljs-comment">//输出17</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="浮点数拓展"><a href="#浮点数拓展" class="headerlink" title="浮点数拓展"></a>浮点数拓展</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//浮点数拓展     银行业务钱的表示？-BigDecimal 数学工具类</span><br>        <span class="hljs-comment">//float 有限  离散  舍入误差    大约  接近但不等于</span><br>        <span class="hljs-comment">//double</span><br>        <span class="hljs-comment">//最好完全使用浮点数进行比较</span><br>        <span class="hljs-comment">//最好完全使用浮点数进行比较//最好完全使用浮点数进行比较</span><br>        <span class="hljs-keyword">float</span> f = <span class="hljs-number">0.1f</span>;<span class="hljs-comment">//0.1</span><br>        <span class="hljs-keyword">double</span> d = <span class="hljs-number">1.0</span>/<span class="hljs-number">10</span>;<span class="hljs-comment">//0.1</span><br>        System.out.println(f==d);<span class="hljs-comment">//false</span><br>        System.out.println(f);<span class="hljs-comment">//0.1</span><br>        System.out.println(d);<span class="hljs-comment">//0.1</span><br>        <span class="hljs-keyword">float</span> d1 = <span class="hljs-number">271627163762372881f</span>;<br>        <span class="hljs-keyword">float</span> d2 = d1 + <span class="hljs-number">1</span>;<br>        System.out.println(d1 == d2);<span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符拓展"><a href="#字符拓展" class="headerlink" title="字符拓展"></a>字符拓展</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//字符拓展</span><br>        <span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;中&#x27;</span>;<br>        System.out.println(c1);<br>        System.out.println((<span class="hljs-keyword">int</span>)c1);<span class="hljs-comment">//强制转换</span><br>        System.out.println(c2);<br>        System.out.println((<span class="hljs-keyword">int</span>)c2);<span class="hljs-comment">//强制转换</span><br>        <span class="hljs-comment">//所有的字符本质还是数字</span><br>        <span class="hljs-comment">//编码 Unicode 表：97=a 65=A 2字节  0-65536  Excel  2的16次方=65536</span><br>        <span class="hljs-comment">//U0000 UFFFF</span><br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">&#x27;\u0061&#x27;</span>;<br>        System.out.println(c3);<span class="hljs-comment">//a</span><br>        <span class="hljs-comment">//转义字符</span><br>        <span class="hljs-comment">// \t   制表符</span><br>        <span class="hljs-comment">// \n   换行</span><br>        System.out.println(<span class="hljs-string">&quot;Hello\nWorld&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br>        String sa = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        String sb = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        System.out.println(sa==sb);<span class="hljs-comment">//false</span><br>        String sc = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        String sd = <span class="hljs-string">&quot;hello world&quot;</span>;<br>        System.out.println(sc==sd);<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//对象 从内存分析</span><br>        <span class="hljs-comment">//布尔值扩展</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>       <span class="hljs-comment">/* if(flag==true)&#123;&#125; 等于 if(flag)&#123;&#125;*/</span><br>        <span class="hljs-comment">//Less is More! 代码要精简易读</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>低  —————————————————————-&gt;  高</p><p>byte , short ,char —&gt;int—&gt;long—&gt;float—&gt;double</p><p>运算中，不同类型的数据先转化为同一类型，然后再进行运算！</p><p><strong><font color="red">强制转换：  （类型）变量名    高—&gt;低</font></strong></p><p><strong><font color="red">自动转换：   低—&gt;高</font></strong></p><p><strong><em>注意点：</em></strong></p><ol><li><strong><em>不能对布尔值进行转换</em></strong></li><li><strong><em>不能把对象类型转换成不相干的类型</em></strong></li><li><strong><em>在把高容量类型转换到低容量的时候，需要强制转换</em></strong></li><li><strong><em>转换的时候可能存在内存溢出，或者精度问题！（强制转换和自动转换均存在）</em></strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">example01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">//在intellij IDEA开发者工具中 Java中main方法快捷方式   psvm + 回车</span><br>        <span class="hljs-comment">//操作比较大的数的时候，注意溢出问题</span><br>        <span class="hljs-keyword">int</span> money = <span class="hljs-number">10_0000_0000</span>;<span class="hljs-comment">//JDk7以后新特性，数字之间可以用下划线分割</span><br>        <span class="hljs-keyword">int</span> year = <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">int</span> total = money * year;<span class="hljs-comment">//-1474836480 , 计算的时候溢出了</span><br>        <span class="hljs-keyword">long</span> total2 = money * year;<span class="hljs-comment">//-1474836480 ，money * year计算结果默认是int类型，然后计算完之后再转换成long已经晚了，转换之前就已经存在了问题！</span><br>        <span class="hljs-keyword">long</span> total3 = money * ((<span class="hljs-keyword">long</span>)year);<span class="hljs-comment">//20000000000 ， 先把一个数转换为long类型</span><br>        System.out.println(total3);<span class="hljs-comment">//在intellij IDEA开发者工具中 输出方法快捷键  sout + 回车</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p><strong>1.类</strong></p><p><strong>2.接口</strong></p><p><strong>3.数组</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-show</title>
    <link href="/2022/01/09/v-show/"/>
    <url>/2022/01/09/v-show/</url>
    
    <content type="html"><![CDATA[<h1 id="Day3-v-show和v-if"><a href="#Day3-v-show和v-if" class="headerlink" title="Day3  v-show和v-if"></a>Day3  v-show和v-if</h1><a id="more"></a><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>V-show<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/2.jpg&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age&gt;=18&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;+&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;Addage&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reduceage&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br>            age:17<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            Addage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.age++;</span><br>            &#125;,<br><span class="javascript">            reduceage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.age--;</span><br>            &#125;<br>        &#125;<br><br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isshow&quot;</span>&gt;</span>陈建<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isshow&quot;</span>&gt;</span>陈建 v-show<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变显示状态&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;wendu&gt;=35 &quot;</span>&gt;</span>热死啦<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--表达式 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class="javascript">            isshow:<span class="hljs-literal">true</span>,</span><br>            wendu:30<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            show:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.isshow=!<span class="hljs-built_in">this</span>.isshow</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-show和v-if的区别"><a href="#v-show和v-if的区别" class="headerlink" title="v-show和v-if的区别"></a>v-show和v-if的区别</h2><p>显示切换，事件绑定</p><ol><li> v-show，根据真假切换元素的显示状态；原理是修改元素的display，实现显示隐藏；</li></ol><p>​      指令后边的内容，最终都会解析为布尔值；值为true元素显示，值为false元素隐藏；</p><p>​      数据改变后，对应的元素的显示状态会同步更新。</p><ol start="2"><li>v-if，根据真假切换元素的显示状态；本质是操纵DOM元素来切换显示状态；</li></ol><p>​      表达式的值为true，元素存放于dom树中，为false,从dom书中删除。</p><p>​      频繁切换用v-show，反之用v-if，前者的切换消耗小。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基本指令</title>
    <link href="/2022/01/08/Vue%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/01/08/Vue%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Day2-基本指令"><a href="#Day2-基本指令" class="headerlink" title="Day2 基本指令"></a>Day2 基本指令</h1><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">## 1.内容绑定，事件绑定</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-text</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 设置标签的内容；默认写法会替换全部内容，</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. 使用插值表达式“&#123;&#123;&#125;&#125;”可以替换指定内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3. 内部支持写表达式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###  v-html</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 设置元素的innerHTML</span><br><span class="hljs-comment">2. 内容中html结构会被解析为标签；</span><br><span class="hljs-comment">3. v-text指令无论内容是什么，只会解析文本。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-on</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 为元素绑定事件；</span><br><span class="hljs-comment">2. 事件名不需要写on；</span><br><span class="hljs-comment">3. 指令可以简写为@；</span><br><span class="hljs-comment">4. 绑定的方法定义在methods属性中；</span><br><span class="hljs-comment">5. 方法内部通过this关键字可以访问定义在data中的数据。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">##     2.显示切换，事件绑定</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-show</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 根据真假切换元素的显示状态；</span><br><span class="hljs-comment">2. 原理是修改元素的display，实现显示隐藏；</span><br><span class="hljs-comment">3. 指令后边的内容，最终都会解析为布尔值；</span><br><span class="hljs-comment">4. 值为true元素显示，值为false元素隐藏；</span><br><span class="hljs-comment">5. 数据改变后，对应的元素的显示状态会同步更新。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-if</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 根据真假切换元素的显示状态；</span><br><span class="hljs-comment">2. 本质是操纵DOM元素来切换显示状态；</span><br><span class="hljs-comment">3. 表达式的值为true，元素存放于dom树中，为false,从dom书中删除。</span><br><span class="hljs-comment">4. 频繁切换用v-show，反之用v-if，前者的切换消耗小。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-bind</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 为元素绑定属性；完整写法是v-bind:属性名=“”</span><br><span class="hljs-comment">2. 简写 :属性名=“”</span><br><span class="hljs-comment">3. 需要动态的增删class建议使用对象的方式。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">##     3.列表循环，表单元素绑定</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###  v-for</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 根据数据生成列表结构；数组经常和v-for结合使用；</span><br><span class="hljs-comment">2. 语法是v-for=“(item,index) in 数据”</span><br><span class="hljs-comment">3. item和index可以结合其他指令一起使用；</span><br><span class="hljs-comment">4. 数组长度的更新会同步到页面上，是响应式的。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-on</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  1.事件绑定的方法写成函数调用的形式，可以传入自定义参数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  2.定义方法时需要定义形参来接收传入的实参。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  3.事件的后面跟上.修饰符可以对事件进行限制</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  4..enter可以限制触发的按键为回车</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### v-model</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 指令的作用是便捷的设置和获取表单元素的值；</span><br><span class="hljs-comment">2. 绑定的数据会和表单元素值相关联</span><br><span class="hljs-comment">3. 绑定的数据和表单元素的值双向绑定</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- v-text --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message+&#x27;!&#x27;&quot;</span>&gt;</span>杭州<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>濮阳&#123;&#123;message +&quot;!&quot;&#125;&#125;杭州<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-comment">&lt;!-- 插值表达式，优点替换部分内容（大括号内） --&gt;</span><br>        <span class="hljs-comment">&lt;!-- v-html --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- v-on --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;事件绑定&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;事件绑定1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;双击事件&quot;</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changecity&quot;</span>&gt;</span>&#123;&#123;city&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- v-show --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/1.jpg&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isshow&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换显示状态 &quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeisshow&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;img src=&quot;../img/2.jpg&quot; v-show=&quot;age&gt;=18&quot;&gt;</span><br><span class="hljs-comment">        &lt;input type=&quot;button&quot; value=&quot;增加年龄&quot; @click=&quot;Addage&quot;&gt; --&gt;</span><br>        <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class="javascript">                message:<span class="hljs-string">&#x27;陈建岩&#x27;</span>,</span><br><span class="handlebars"><span class="xml">                content:&quot;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;#&#x27;</span>&gt;</span>杭州<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&quot;,</span></span><br><span class="javascript">                city:<span class="hljs-string">&quot;濮阳&quot;</span>,</span><br><span class="javascript">                isshow:<span class="hljs-literal">false</span>,</span><br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                doIt:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;做it&quot;</span>);</span><br>                &#125;,<br><span class="javascript">                changecity:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.city+=<span class="hljs-string">&quot;杭州&quot;</span></span><br>                &#125;,<br><span class="javascript">                changeisshow:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.isshow=!<span class="hljs-built_in">this</span>.isshow;</span><br>                &#125;<br>                <br>            &#125;,<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2022/01/07/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/07/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Day1-基本结构"><a href="#Day1-基本结构" class="headerlink" title="Day1 基本结构"></a>Day1 基本结构</h1><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue第一天<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1.Vue会管理el选项命中的元素及其内部的后代元素</span><br><span class="hljs-comment">        2.可以使用其他的选择器，但建议使用id选择器</span><br><span class="hljs-comment">        3.可以使用其他双标签，不能使用HTML和body   </span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--data数据对象</span><br><span class="hljs-comment">    1.Vue中用到的数据定义到data中</span><br><span class="hljs-comment">    2.data中可以写复杂类型的数据</span><br><span class="hljs-comment">    3.渲染复杂类型数据时，遵守js的语法即可--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;bb&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;school.name&#125;&#125;&#123;&#123;school.address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            &#123;&#123;Array[0]&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            &#123;&#123;Array[1]&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            &#123;&#123;Array[2]&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qqq&quot;</span>&gt;</span>&#123;&#123;aa&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">            <span class="hljs-comment">// el:&quot;h1&quot;,</span></span><br>            data:&#123;<br><span class="javascript">                message:<span class="hljs-string">&#x27;hello vue!&#x27;</span>,</span><br><span class="javascript">                bb:<span class="hljs-string">&#x27;你好！&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-comment">//对象</span></span><br>                school:&#123;<br><span class="javascript">                 name:<span class="hljs-string">&quot;陈建岩&quot;</span>,</span><br><span class="javascript">                 address:<span class="hljs-string">&quot;杭州&quot;</span></span><br>                &#125;,<br><span class="javascript">                <span class="hljs-comment">//数组</span></span><br><span class="javascript">                <span class="hljs-built_in">Array</span>:[<span class="hljs-string">&quot;郑州&quot;</span>,<span class="hljs-string">&quot;杭州&quot;</span>,<span class="hljs-string">&quot;濮阳&quot;</span>]</span><br><br>            &#125;<br>        <br>        &#125;)<br><span class="javascript">        <span class="hljs-keyword">var</span> app1 = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;.qqq&quot;</span>,</span><br>            data:&#123;<br><span class="javascript">                aa:<span class="hljs-string">&#x27;hello!&#x27;</span></span><br>            &#125;<br>        <br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习笔记2</title>
    <link href="/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><a id="more"></a><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = intAll;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intAll</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> ans = prompt(<span class="hljs-string">&quot;Enter a number&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">/*我们要关注 3 种情况：根本没有输入；用户输入了某些内容，但不是数字；输入的是数字，但它是负数（因为负数的平方根是虚数，这超出了这个示例的范围） 。如果 !ans 是 true ，就意味着用户没有输入任何内容。内置的 isNaN() 方法检查传递给它的参数是否“不是数字（Not a Number） ” 。如果isNaN() 返回 true ，就说明输入的内容是无效的。如果 ans 小于 0，它就是负数。对于以上任何情况，都希望抛出一个错误，指出“Not a valid number（不是有效的数字） ” 。当抛出错误之后，JavaScript 跳出try 块并寻找对应的 catch 语句。因此， try 块中其余的代码都被跳过。 */</span><br>        <br>        <span class="hljs-keyword">if</span> (!ans||<span class="hljs-built_in">isNaN</span>(ans)||ans&lt;<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Not a number&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//如果输入了有效的内容，就显示平方根</span><br>        alert(<span class="hljs-string">&quot;The square root of&quot;</span>+ans+<span class="hljs-string">&quot;is&quot;</span>+<span class="hljs-built_in">Math</span>.sqrt(ans));<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(errMsg)&#123;<br>        alert(errMsg.message);<br>    &#125;<br>    <span class="hljs-comment">/*还有一个可选部分：最后的 &#123;&#125; 块。这个部分放在 catch 后面，无论 try 块是否抛出错误，这里</span><br><span class="hljs-comment">包含的代码都应该执行。  */</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习笔记1</title>
    <link href="/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/03/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="警告框、确认用户的选择、提示用户、重新定向。"><a href="#警告框、确认用户的选择、提示用户、重新定向。" class="headerlink" title="警告框、确认用户的选择、提示用户、重新定向。"></a>警告框、确认用户的选择、提示用户、重新定向。</h1><a id="more"></a><h2 id="html文档"><a href="#html文档" class="headerlink" title="html文档"></a>html文档</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myMessage&quot;</span>).innerHTML = <span class="hljs-string">&quot;Hello,nihao&quot;</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;Day1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myMessage&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Js文件"><a href="#Js文件" class="headerlink" title="Js文件"></a>Js文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//警告框</span><br><span class="hljs-comment">//confirm() 方法有一个参数 （向用户询问的问题） ， 并根据用户的响应返回 true 或 false 。</span><br><br><span class="hljs-keyword">if</span>(confirm(<span class="hljs-string">&quot;Are you sure you want to do that?&quot;</span>))&#123;<br>alert(<span class="hljs-string">&quot;you said yes&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>alert(<span class="hljs-string">&quot;you said no &quot;</span>)<br>&#125;<br><br><span class="hljs-comment">/*传递给 prompt() 方法的是由逗号分隔的两段信息（正式的术语是参数） ：向用户询问的问题和默</span><br><span class="hljs-comment">认回答。这个方法返回用户的响应或 null。*/</span><br><br><span class="hljs-comment">/*如果变量是在一个函数中创建的，那么它是这</span><br><span class="hljs-comment">个函数的局部（local）变量，其他函数不能访问它。如果它是在任何函数之外创建的，</span><br><span class="hljs-comment">它就是全局的（global） ，脚本中的所有代码都可以访问它。在这个脚本中，我们创建</span><br><span class="hljs-comment">了ans全局变量。 */</span><br><br><br><span class="hljs-comment">//提示用户</span><br><span class="hljs-keyword">var</span> ans = prompt(<span class="hljs-string">&quot;Are you sure want to do that?&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">if</span>(ans)&#123;<br> alert(<span class="hljs-string">&quot;you said&quot;</span>+ans)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br> alert(<span class="hljs-string">&quot;you refused to answer&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">用链接对用户进行重定向 </span><br><span class="hljs-comment">当完成页面加载时，它会触发 initAll() 函数。</span><br><span class="hljs-comment">这个函数告诉 id 为 change 的元素 （也就是步骤 1 中的链接） ， 在它被单击时应该调用</span><br><span class="hljs-comment">Second函数。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">window</span>.onload = intAll;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intAll</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;change&quot;</span>).onclick = Second;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如果调用这个函数， 它就将 window.location （即浏览器中显示的页面） 设置为一个新页面。 return </span><br><span class="hljs-comment">false 表示停止对用户单击的处理，这样就不会加载 href 指向的页面。 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Second</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">window</span>.location=<span class="hljs-string">&quot;index.html&quot;</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this的用法"><a href="#this的用法" class="headerlink" title="this的用法"></a>this的用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = initAll; <br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initAll</span>(<span class="hljs-params"></span>) </span>&#123;  <br>     <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;redirect&quot;</span>).onclick = initRedirect; <br>&#125; <br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> JavaScript 关键字 this 使脚本能够根据使用这个关键字的上下文将值传递给函数。在这个示例</span><br><span class="hljs-comment">中， this 是在一个由标签的事件触发的函数中使用的，所以 this 是一个链接对象。只需将 this 看</span><br><span class="hljs-comment">做一个容器.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initRedirect</span>(<span class="hljs-params"></span>) </span>&#123; <br>   alert(<span class="hljs-string">&quot;We are not responsible for the content of pages outside our site&quot;</span>); <br>     <span class="hljs-built_in">window</span>.location = <span class="hljs-built_in">this</span>; <br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>     &#125;<br></code></pre></td></tr></table></figure><h2 id="多级条件switch-case语句"><a href="#多级条件switch-case语句" class="headerlink" title="多级条件switch /case语句"></a>多级条件switch /case语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = intAll;<br><span class="hljs-comment">//当加载页面时，调用 initAll() 函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">intAll</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;frist&quot;</span>).onclick=Second;<br> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;second&quot;</span>).onclick=Second;<br> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;third&quot;</span>).onclick=Second;<br>    <br><span class="hljs-comment">/*在这个函数中，我们为页面上的每个按钮设置了 onclick 处理程序。因为在 HTML 中设置了 id</span><br><span class="hljs-comment">属性和 value 属性，所以可以使用 getElementById() 设置事件处理程序。如果有 value 属性，就可以使用 getElementByValue() 调用，那么就不必设置 id 属性。 */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Second</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//this 对象的 id 用作 switch() 的参数。这个值将决定执行以下 case 语句中的哪一个</span><br>    <span class="hljs-keyword">switch</span>(<span class="hljs-built_in">this</span>.id)&#123;<br>        <span class="hljs-keyword">case</span><span class="hljs-string">&quot;frist&quot;</span>:<br>        alert(<span class="hljs-string">&quot;you clicked frist&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span><span class="hljs-string">&quot;second&quot;</span>:<br>        alert(<span class="hljs-string">&quot;you clicked second&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span><span class="hljs-string">&quot;third&quot;</span>:<br>        alert(<span class="hljs-string">&quot;you clicked third&quot;</span>)<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java总结1</title>
    <link href="/2021/01/28/Java%E6%80%BB%E7%BB%931/"/>
    <url>/2021/01/28/Java%E6%80%BB%E7%BB%931/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是多态性？什么是虚拟方法的调用？"><a href="#1、什么是多态性？什么是虚拟方法的调用？" class="headerlink" title="1、什么是多态性？什么是虚拟方法的调用？"></a>1、什么是多态性？什么是虚拟方法的调用？</h2><p>对象的多态性，父类的引用指向子类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p = <span class="hljs-keyword">new</span> Man();<br>p.eat();<br></code></pre></td></tr></table></figure><p>调用方法时，编译时看左边，运行时看右边。</p><h2 id="2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。"><a href="#2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。" class="headerlink" title="2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。"></a>2、一个类只有一个直接父类，一个父类可以有多个父类。子类能直接获取父类的父类的结构，子类可以获取父类中private权限的属性。</h2><h2 id="3、方法的重写（override-overwrite）的具体规则有哪些？"><a href="#3、方法的重写（override-overwrite）的具体规则有哪些？" class="headerlink" title="3、方法的重写（override/overwrite）的具体规则有哪些？"></a>3、方法的重写（override/overwrite）的具体规则有哪些？</h2><p>Overload是重载的意思，表示在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参bai数类型不同即可。Override是覆盖的意思，也就是重写，它与返回值类型无关，只看参数列表。</p><p>两者不同主要体现在:</p><p>1，目的</p><p>overload用于增加程序的可读性(做法不同,但是做的同一事情)。  override用于提供其超级类已经提供的方法的特定实现。  </p><p>2，范围</p><p>overload 在相同的类范围内内执行。  override发生在两类具有继承（继承）的关系。</p><p>3， 参数 </p><p>overload参数必须不同。  override参数必须相同。 </p><p>4，多态性</p><p>overload 静态多态,调用的函数在编译时被选中。  override 是运行时多态性的。 </p><p>5，返回类型</p><p>overload中可以相同或不同。但你必须改变参数。  override必须是相同的或协变的。</p><h3 id="具体规则"><a href="#具体规则" class="headerlink" title="具体规则"></a>具体规则</h3><p>override（重写，覆盖） （1）方法名、参数、<a href="https://www.baidu.com/s?wd=%E8%BF%94%E5%9B%9E%E5%80%BC&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">返回值</a>相同。 （2）子类方法不能缩小父类方法的访问权限。 （3）子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。 （4）存在于父类和子类之间。 （5）方法被定义为final不能被重写。 （6）被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</p><p>overload（重载，过载） （1）参数类型、个数、顺序至少有一个不相同。 （2）不能重载只有<a href="https://www.baidu.com/s?wd=%E8%BF%94%E5%9B%9E%E5%80%BC&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">返回值</a>不同的方法名。 （3）针对于一个类而言。 （4）不能通过访问权限、返回类型、抛出的异常进行重载； （5）方法的异常类型和数目不会对重载造成影响；</p><p>override应用中，最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法进行了声明，而我们在实现时，就需要实现接口声明的所有方法。 除了这个典型的用法以外，我们在继承中也可能会在子类覆盖父类中的方法。</p><h3 id="4、super调用构造器，有哪些具体的注意点？"><a href="#4、super调用构造器，有哪些具体的注意点？" class="headerlink" title="4、super调用构造器，有哪些具体的注意点？"></a>4、super调用构造器，有哪些具体的注意点？</h3><p>this(形参列表)：本类重载的其他构造器；</p><p>super(形参列表)：调用父类中指定的构造器；</p><p>俩个都必须放在第一行，只能选择一个。如果不写，默认Super空参。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言day2</title>
    <link href="/2021/01/13/c%E8%AF%AD%E8%A8%80day2/"/>
    <url>/2021/01/13/c%E8%AF%AD%E8%A8%80day2/</url>
    
    <content type="html"><![CDATA[<h1 id="printf-scanf-if-else-for-。"><a href="#printf-scanf-if-else-for-。" class="headerlink" title="printf(),scanf(),if else,for()。"></a><code>printf()</code>,<code>scanf</code>(),<code>if else</code>,<code>for()</code>。</h1><a id="more"></a><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><p>函数<code>printf()</code>的一般调用格式为：</p><h5 id="printf-格式控制字符串，输出参数1，输出参数2…"><a href="#printf-格式控制字符串，输出参数1，输出参数2…" class="headerlink" title="printf(格式控制字符串，输出参数1，输出参数2…);"></a>printf(格式控制字符串，输出参数1，输出参数2…);</h5><p>格式控制字符串需要用双引号括起来，表示输出的格式；而输出参数则是一些要输出的数据，这些数据可以是<code>变量</code>、<code>常量</code>、<code>表达式</code>。</p><h4 id="格式控制字符串"><a href="#格式控制字符串" class="headerlink" title="格式控制字符串"></a>格式控制字符串</h4><p>格式控制字符串包含两种信息：格式控制说明和普通字符。例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;整数=%d,浮点数=%f\n&quot;</span>,x,y);<br></code></pre></td></tr></table></figure><p>输出时普通字符会原样输出，%d和%f会分别输出x和y的值。格式化控制说明其类型、个数和位置是一一对应的关系。</p><p>在输出格式控制说明中，可以加宽度限定词，指定数据的输出宽度。例如，整型数据的格式控制说明%md，指定了数据的输出宽度为m(包括符号位)。实型数据的输出格式控制说明%m.nf，指定输出浮点型数据时保留n位小数，且输出宽度是m。</p><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><p>函数<code>scanf()</code>的一般调用格式为：</p><h5 id="scanf-格式控制字符串，输出参数1，输出参数2…"><a href="#scanf-格式控制字符串，输出参数1，输出参数2…" class="headerlink" title="scanf(格式控制字符串，输出参数1，输出参数2…);"></a>scanf(格式控制字符串，输出参数1，输出参数2…);</h5><p>格式控制字符串表示输入的格式，输入参数是变量地址（变量名前加&amp;）。例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">double</span> y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%lf&quot;</span>,x,y);<br></code></pre></td></tr></table></figure><p>与<code>prinft()</code>不同的格式控制字符，在<code>scanf()</code>函数中float型数据用%f,double类型用%lf。而在<code>printf()</code>中浮点数类型都用%f。两者的共同之处是int型数据都用%d。</p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if  else"></a>if  else</h2><p><code>if-else</code>的一般形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(表达式)<br>语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>语句<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pythonday2</title>
    <link href="/2021/01/06/pythonday2/"/>
    <url>/2021/01/06/pythonday2/</url>
    
    <content type="html"><![CDATA[<h1 id="两种有序的列表list和tuple"><a href="#两种有序的列表list和tuple" class="headerlink" title="两种有序的列表list和tuple"></a>两种有序的列表list和tuple</h1><p>list是一种有序的集合，可以随时添加和删除其中的元素。</p><p>tuple称为元组，一旦初始化就不能更改。</p><a id="more"></a><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>表示方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t=[<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>变量<code>t</code>就是一个<code>list</code>,用<code>len()</code>函数可以获取list元素的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(t)<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可以用索引来访问每一个位置的元素，最后一个元素的索引是<code>len(t)-1</code>，还可以用<code>-1</code>做索引直接访问最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">2</span>]<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t[-<span class="hljs-number">1</span>]<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>可以用<code>append()</code>方法添加元素到末尾位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.append(<span class="hljs-string">&#x27;9&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;9&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>list</code>里边的数据类型可以是多种的，当然也可以是<code>list</code>。</p><p>要删除<code>lis</code>末尾的元素可以用pop()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.pop()<br><span class="hljs-string">&#x27;9&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>把元素插入到指定的位置，可以用<code>insert()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.insert(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>删除指定位置的元素，可以用<code>pop(i)</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t.pop(<span class="hljs-number">0</span>)<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>把某个元素替换成别的元素，可以直接赋值给对应的索引位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>[<span class="hljs-number">0</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>当<code>list</code>中包含<code>list</code>时，用索引来访问时可以看作一个二维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>print(t[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>tuple与list非常相似，但是一旦初始化就无法改变，获取元素的方法与list一样，用索引方法进行查询。相比较tuple比较安全，所以能用tuple就用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>p=(<span class="hljs-number">7</span>,[<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><span class="hljs-comment">#可以看出当想改变`0`处的元素时，会报错误信息。</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">&#x27;tuple&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br><span class="hljs-comment">#当改变tuple中的list时则能改变成功，这是因为改变其实时list里边的元素而tuple一开始指向的就是list,其指向并没有改变。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p<br>(<span class="hljs-number">7</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h5 id="当tuple中只有一个元素的时候，必须用-消除歧义，避免计算机识别成数字1。"><a href="#当tuple中只有一个元素的时候，必须用-消除歧义，避免计算机识别成数字1。" class="headerlink" title="当tuple中只有一个元素的时候，必须用,消除歧义，避免计算机识别成数字1。"></a>当tuple中只有一个元素的时候，必须用<code>,</code>消除歧义，避免计算机识别成数字1。</h5><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>list</code>可以完成“增”<code>append()</code>“删”<code>pop()</code>“改”<code>t[0]=1赋值操作</code>“查”<code>索引</code>“插”<code>insert(位置，值)</code>操作。</p><p><code>tuple</code>相对list比较安全，其内部指向元素不能改变。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pythonday1</title>
    <link href="/2021/01/05/pythonday1/"/>
    <url>/2021/01/05/pythonday1/</url>
    
    <content type="html"><![CDATA[<h1 id="每日学Python-day1"><a href="#每日学Python-day1" class="headerlink" title="每日学Python day1"></a>每日学Python day1</h1><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>括号内英语单引号和双引号都可以，如果想输出多个字符，可以用逗号“,”隔开。在打印的时候遇到一个逗号，就会输出一个空格。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><p>可以直接输入并且存放在变量里，括号里也可以存放信息。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的名字&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h3><p>python语法比较简单，采用缩进方式。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#注释</span><br>a=<span class="hljs-number">100</span><br><span class="hljs-keyword">if</span> a &gt;= <span class="hljs-number">0</span>:<br>    print(a)<br><span class="hljs-keyword">else</span>:<br>    print(-a)<br></code></pre></td></tr></table></figure><p>以<code>#</code>开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。</p><p>其他每一行都是一个语句，当语句以冒号<code>:</code>结尾时，缩进的语句视为代码块。</p><p>缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的惯例，应该始终坚持使用<em>4个空格</em>的缩进。</p><p>在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整数、浮点数、字符串、布尔值（True和Flase）。</p><h5 id="转义字符-，例："><a href="#转义字符-，例：" class="headerlink" title="转义字符\，例："></a>转义字符\，例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&#x27;i\&#x27;m\&quot;ok\&quot;!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出的结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">i<span class="hljs-string">&#x27;m&quot;ok&quot;!</span><br></code></pre></td></tr></table></figure><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p><p><code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义。</p><p>python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容。</p><h5 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h5><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p><p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>。</p><p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>。</p><p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>。</p><p>布尔值经常用在条件判断中。</p><h5 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h5><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>变量<code>a</code>是一个整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">t_007 = <span class="hljs-string">&#x27;T007&#x27;</span><br></code></pre></td></tr></table></figure><p>变量<code>t_007</code>是一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Answer = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>变量<code>Answer</code>是一个布尔值<code>True</code>。</p><p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">123</span> <span class="hljs-comment"># a是整数</span><br>print(a)<br>a = <span class="hljs-string">&#x27;ABC&#x27;</span> <span class="hljs-comment"># a变为字符串</span><br>print(a)<br>输出：<br><span class="hljs-number">123</span><br>ABC<br></code></pre></td></tr></table></figure><p>这种变量本身类型不固定的语言称之为<em>动态语言</em>，与之对应的是<em>静态语言</em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>所谓常量就是不能变的变量，在Python中通常用全部大写的变量名表示常量：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PI</span> = <span class="hljs-number">3</span>.<span class="hljs-number">14159265359</span><br></code></pre></td></tr></table></figure><p>但事实上<code>PI</code>仍然是一个变量，Python根本没有任何机制保证<code>PI</code>不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量<code>PI</code>的值，也没人能拦住你。</p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>python中有两种除法：</p><ol><li>/，计算结果为浮点数，即便两个数能够整除，其结果也是浮点数。</li><li>//，被称为地板除，结果永远是整数。</li><li>%，余数运算。</li></ol><p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言day1</title>
    <link href="/2021/01/05/c%E8%AF%AD%E8%A8%80day1/"/>
    <url>/2021/01/05/c%E8%AF%AD%E8%A8%80day1/</url>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="编译预处理命令"><a href="#编译预处理命令" class="headerlink" title="编译预处理命令"></a>编译预处理命令</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>末尾不加分号</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(main)</span></span>&#123;<br>    (函数体);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个名为main的函数，该函数的返回值时整数型（int），参数在函数的后面的一对括号中定义，这里的关键字void表示main()函数不需要参数。任何一个程序都必须有而且只能由一个main（）函数，当程序运行时，首先从main（）函数执行。</p><h2 id="常量、变量和数据类型"><a href="#常量、变量和数据类型" class="headerlink" title="常量、变量和数据类型"></a>常量、变量和数据类型</h2><p>在程序运行过程中，其值不能被改变的量成为常量，其值可以改变的量称为变量。</p><h5 id="常量的类型通常由书写格式决定。"><a href="#常量的类型通常由书写格式决定。" class="headerlink" title="常量的类型通常由书写格式决定。"></a>常量的类型通常由书写格式决定。</h5><p>整型常量（100）、实型常量（199.21），文字常量、符号常量。</p><h5 id="变量的类型是在定义时指定。"><a href="#变量的类型是在定义时指定。" class="headerlink" title="变量的类型是在定义时指定。"></a>变量的类型是在定义时指定。</h5><p>变量的定义格式一般为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">类型名 变量名；<br><span class="hljs-built_in">int</span> a,b; <span class="hljs-comment">/*定义两个整型变量a和b，用于存放整数。</span><br></code></pre></td></tr></table></figure><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p>int(整型)、char(字符型)、float(单精度浮点数)、double(双精度浮点数)。</p><h5 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h5><p>数组，以[]为标志</p><p>枚举(enum)，联合(union)</p><p>指针类型，以*为标志</p><h5 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h5><p><img src="https://raw.githubusercontent.com/cjy1998/imagesbed/main/img/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><p>return 0;它结束main()函数的运行，并向系统返回一个整数0，作为程序的结束状态。由于main（）函数的返回值是整型数，因此，任何整数都可以作为返回值。按照惯例，如果main()函数返回0，说明程序运行正常，返回其他数字则表示各种不同的错误情况。系统可以通过检查返回值来判断程序是否运行成功。</p></li><li><p>c语言中的所有语句都必须以分号结束。</p></li><li><p>\n换行符。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/01/04/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/01/04/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>标题就是在内容前加# 来实现，注意#与内容间应有空格。</p><a id="more"></a><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-emphasis">*这是倾斜的文字*</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">~~这是加删除线的文字~~</span></span></span></span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><hr><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;这是引用的内容</span><br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>----<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">****</span>*</span></span><br></code></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片titl<span class="hljs-string">e&#x27;&#x27;</span>)<br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><p><img src="https://raw.githubusercontent.com/cjy1998/imagesbed/main/img/img3.jpg" alt="github图床图片"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">！[<span class="hljs-string">效果图</span>](<span class="hljs-link">/images/img1.jpg&quot;效果图&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img1.jpg" alt="效果图"></p><p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p><h5 id="使用插件标签引用图片"><a href="#使用插件标签引用图片" class="headerlink" title="使用插件标签引用图片"></a>使用插件标签引用图片</h5><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#123;<span class="hljs-symbol">%</span> asset_img <span class="hljs-built_in">example</span>.jpg This <span class="hljs-built_in">is</span> an <span class="hljs-built_in">example</span> <span class="hljs-built_in">image</span> <span class="hljs-symbol">%</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><p>语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">超链接名</span>](<span class="hljs-link">超链接地址 &quot;超链接title&quot;</span>)<br>title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">百度</span>](<span class="hljs-link">http://baidu.com</span>)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://baidu.com/">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;超链接地址&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>超链接名<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>示例<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>简书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法：</p><p>无序列表用-+*任何一种都可以</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br><br>注意：- + <span class="hljs-emphasis">* 跟内容之间都要有一个空格</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo基本操作</title>
    <link href="/2021/01/04/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/01/04/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="常见的hexo命令"><a href="#常见的hexo命令" class="headerlink" title="常见的hexo命令"></a>常见的hexo命令</h1><a id="more"></a><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><p>生成静态文件。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><p>部署网站，部署之前预先生成静态文件。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2013/7/13 20:46:25<br>---<br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>[<code>config.default_layout</code>]</td></tr><tr><td>title</td><td>标题</td><td>文章的文件名</td></tr><tr><td>date</td><td>建立时间</td><td>文章建立时间</td></tr><tr><td>updated</td><td>更新时间</td><td>文件更新时间</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td>categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td></td></tr></tbody></table><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>分类具有顺序性和层次性，而标签没有顺序和层次。</p><h3 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h3><p>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">  -</span> Diary<br><span class="hljs-bullet">  -</span> Life<br></code></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">-</span> [Diary, PlayStation]<br><span class="hljs-bullet">-</span> [Diary, Games]<br><span class="hljs-bullet">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
